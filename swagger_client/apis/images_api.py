# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImagesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def loopy_loyalty_create_image_assets(self, body, **kwargs):
        """
        Create image asset
        Creates a new Loopy Loyalty image asset.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_create_image_assets(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoopyCreateImageAssetRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_create_image_assets_with_http_info(body, **kwargs)
        else:
            (data) = self.loopy_loyalty_create_image_assets_with_http_info(body, **kwargs)
            return data

    def loopy_loyalty_create_image_assets_with_http_info(self, body, **kwargs):
        """
        Create image asset
        Creates a new Loopy Loyalty image asset.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_create_image_assets_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoopyCreateImageAssetRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_create_image_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_create_image_assets`")

        resource_path = '/imageAsset'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopySuccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_get_stamp_image(self, id, **kwargs):
        """
        Gets stamp image (by ID)
        Gets a default built-in stamp image by ID. The ID can be retrieved from the '[List stamp images](#operation/LoopyLoyalty_listStampImages)' method. Method will serve the image up as a file with Content-Type `svg+xml`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_stamp_image(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The unique identifier to an object or record. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_get_stamp_image_with_http_info(id, **kwargs)
        else:
            (data) = self.loopy_loyalty_get_stamp_image_with_http_info(id, **kwargs)
            return data

    def loopy_loyalty_get_stamp_image_with_http_info(self, id, **kwargs):
        """
        Gets stamp image (by ID)
        Gets a default built-in stamp image by ID. The ID can be retrieved from the '[List stamp images](#operation/LoopyLoyalty_listStampImages)' method. Method will serve the image up as a file with Content-Type `svg+xml`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_stamp_image_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The unique identifier to an object or record. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_get_stamp_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `loopy_loyalty_get_stamp_image`")

        resource_path = '/images/stampImage/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_get_strip_image(self, **kwargs):
        """
        Get strip image (by image configuration)
        Returns or renders a stamped strip image based on the provided stamp configuration. To be requested in the format: https://api.loopyloyalty.com/images?json={URL encoded StripImage JSON Object}. Returns a different content-type based on the `stripImage.imageType` parameter: `svg` (image/svg+xml), `png` (image/png), `json` (json). `svg` is the fastest and preferred image type. [Sample URL](https://api.loopyloyalty.com/images?json=%7B%22width%22%3A1125%2C%22height%22%3A432%2C%22padding%22%3A40%2C%22totalStamps%22%3A10%2C%22stampImage%22%3A%22coffee-2%22%2C%22unstampImage%22%3A%22coffee-2%22%2C%22backgroundColor%22%3A%22%23FF6D00%22%2C%22backgroundOpacity%22%3A1%2C%22backgroundURL%22%3A%22https%3A%2F%2Fs3.amazonaws.com%2Fpasskit-api-core-production%2Fll-stamps%2Fc9a3e1b59dfcc2ba50b7c2d6d7c47219-b.png%22%2C%22stampColor%22%3A%22%23ffffff%22%2C%22stampOpacity%22%3A1%2C%22unstampColor%22%3A%22%23FFFFFF%22%2C%22unstampOpacity%22%3A0.25%2C%22placeholders%22%3Atrue%2C%22placeholderColor%22%3A%22%23a97b50%22%2C%22placeholderOpacity%22%3A1%2C%22placeholderBorderColor%22%3A%22%23FFD600%22%2C%22placeholderBorderOpacity%22%3A1%2C%22rewardsPlaceholders%22%3Atrue%2C%22rewardBorderColor%22%3A%22%23EBFF10%22%2C%22rewardBorderOpacity%22%3A1%2C%22rewardBackgroundColor%22%3A%22%23808548%22%2C%22rewardBackgroundOpacity%22%3A1%2C%22rewardPositions%22%3A0%2C%22stampedStatus%22%3A3%2C%22imageType%22%3A%22svg%22%7D).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_strip_image(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int width: Width of the strip image; default to `1125` (px).
        :param int height: Height of the stripe image; defaults to `432` (px).
        :param float padding: Padding between stamps and the image edge; defaults to `40` (px).
        :param int total_stamps: Total number of stamps to be rendered on the card. Can be between 1-30; defaults to `10`.
        :param str stamp_image: Stamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.
        :param str unstamp_image: Unstamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.
        :param str stamp_image_url: URL for a stamp image to use. If provided will be used instead of `stampImage`; defaults to blank.
        :param str unstamp_image_url: URL for a unstamp image to use. If provided will be used instead of `unstampImage`; defaults to blank.
        :param str background_colour: Hexcode for background colour; defaults to `#401A6B`.
        :param float background_opacity: Opacity for the background, needs to be between 0.00-1.00; defaults to `1`.
        :param str background_url: URL for the background image to use; defaults to blank.
        :param str stamp_colour: Hexcode for stamp colour; defaults to `#FFFFFF`.
        :param float stamp_opacity: Opacity for the stamp image, needs to be between 0.00-1.00; defaults to `1`.
        :param str unstamp_colour: Hexcode for unstamped colour; defaults to `#FFFFFF`.
        :param float unstamp_opacity: Opacity for the unstamped image, needs to be between 0.00-1.00; defaults to `0.25`.
        :param bool placeholders: Indicates if stamp placeholders should be rendered; defaults to `true`.
        :param str placeholder_colour: Hexcode for placeholder colour; defaults to `#6B1D5E`.
        :param float placeholder_opacity: Opacity for the placeholder, needs to be between 0.00-1.00; defaults to `1`.
        :param str placeholder_border_colour: Hexcode for placeholder border colour; defaults to `#177BE3`.
        :param float placeholder_border_opacity: Opacity for the placeholder border, needs to be between 0.00-1.00; defaults to `1`.
        :param bool rewards_placeholders: Indicates if reward place holders should be rendered; defaults to `true`.
        :param str reward_border_colour: Hexcode for reward border colour; defaults to `#EBFF10`.
        :param float reward_border_opacity: Opacity for the reward border, needs to be between 0.00-1.00; defaults to `1`.
        :param str reward_background_colour: Hexcode for reward background colour; defaults to `#808548`.
        :param float reward_background_opacity: Opacity for the reward background, needs to be between 0.00-1.00; defaults to `1`.
        :param int reward_positions: Bitmask to indicate the positions of the rewards (for multiple reward card); defaults to `584` (which is stamp 3, 6 & 9).
        :param int stamped_status: Bitmask to indicate which positions on the stamp card have been stamped; defaults to `3` (stamp 1 & 2).
        :param str image_type: Indicates the image type to be rendered; defaults to `SVG`.   - svg: Renders the image as SVG (preferred).  - png: Renders the image as PNG.  - json: Returns the image as JSON object with image as bytes string.
        :return: LoopyGetImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_get_strip_image_with_http_info(**kwargs)
        else:
            (data) = self.loopy_loyalty_get_strip_image_with_http_info(**kwargs)
            return data

    def loopy_loyalty_get_strip_image_with_http_info(self, **kwargs):
        """
        Get strip image (by image configuration)
        Returns or renders a stamped strip image based on the provided stamp configuration. To be requested in the format: https://api.loopyloyalty.com/images?json={URL encoded StripImage JSON Object}. Returns a different content-type based on the `stripImage.imageType` parameter: `svg` (image/svg+xml), `png` (image/png), `json` (json). `svg` is the fastest and preferred image type. [Sample URL](https://api.loopyloyalty.com/images?json=%7B%22width%22%3A1125%2C%22height%22%3A432%2C%22padding%22%3A40%2C%22totalStamps%22%3A10%2C%22stampImage%22%3A%22coffee-2%22%2C%22unstampImage%22%3A%22coffee-2%22%2C%22backgroundColor%22%3A%22%23FF6D00%22%2C%22backgroundOpacity%22%3A1%2C%22backgroundURL%22%3A%22https%3A%2F%2Fs3.amazonaws.com%2Fpasskit-api-core-production%2Fll-stamps%2Fc9a3e1b59dfcc2ba50b7c2d6d7c47219-b.png%22%2C%22stampColor%22%3A%22%23ffffff%22%2C%22stampOpacity%22%3A1%2C%22unstampColor%22%3A%22%23FFFFFF%22%2C%22unstampOpacity%22%3A0.25%2C%22placeholders%22%3Atrue%2C%22placeholderColor%22%3A%22%23a97b50%22%2C%22placeholderOpacity%22%3A1%2C%22placeholderBorderColor%22%3A%22%23FFD600%22%2C%22placeholderBorderOpacity%22%3A1%2C%22rewardsPlaceholders%22%3Atrue%2C%22rewardBorderColor%22%3A%22%23EBFF10%22%2C%22rewardBorderOpacity%22%3A1%2C%22rewardBackgroundColor%22%3A%22%23808548%22%2C%22rewardBackgroundOpacity%22%3A1%2C%22rewardPositions%22%3A0%2C%22stampedStatus%22%3A3%2C%22imageType%22%3A%22svg%22%7D).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_strip_image_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int width: Width of the strip image; default to `1125` (px).
        :param int height: Height of the stripe image; defaults to `432` (px).
        :param float padding: Padding between stamps and the image edge; defaults to `40` (px).
        :param int total_stamps: Total number of stamps to be rendered on the card. Can be between 1-30; defaults to `10`.
        :param str stamp_image: Stamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.
        :param str unstamp_image: Unstamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.
        :param str stamp_image_url: URL for a stamp image to use. If provided will be used instead of `stampImage`; defaults to blank.
        :param str unstamp_image_url: URL for a unstamp image to use. If provided will be used instead of `unstampImage`; defaults to blank.
        :param str background_colour: Hexcode for background colour; defaults to `#401A6B`.
        :param float background_opacity: Opacity for the background, needs to be between 0.00-1.00; defaults to `1`.
        :param str background_url: URL for the background image to use; defaults to blank.
        :param str stamp_colour: Hexcode for stamp colour; defaults to `#FFFFFF`.
        :param float stamp_opacity: Opacity for the stamp image, needs to be between 0.00-1.00; defaults to `1`.
        :param str unstamp_colour: Hexcode for unstamped colour; defaults to `#FFFFFF`.
        :param float unstamp_opacity: Opacity for the unstamped image, needs to be between 0.00-1.00; defaults to `0.25`.
        :param bool placeholders: Indicates if stamp placeholders should be rendered; defaults to `true`.
        :param str placeholder_colour: Hexcode for placeholder colour; defaults to `#6B1D5E`.
        :param float placeholder_opacity: Opacity for the placeholder, needs to be between 0.00-1.00; defaults to `1`.
        :param str placeholder_border_colour: Hexcode for placeholder border colour; defaults to `#177BE3`.
        :param float placeholder_border_opacity: Opacity for the placeholder border, needs to be between 0.00-1.00; defaults to `1`.
        :param bool rewards_placeholders: Indicates if reward place holders should be rendered; defaults to `true`.
        :param str reward_border_colour: Hexcode for reward border colour; defaults to `#EBFF10`.
        :param float reward_border_opacity: Opacity for the reward border, needs to be between 0.00-1.00; defaults to `1`.
        :param str reward_background_colour: Hexcode for reward background colour; defaults to `#808548`.
        :param float reward_background_opacity: Opacity for the reward background, needs to be between 0.00-1.00; defaults to `1`.
        :param int reward_positions: Bitmask to indicate the positions of the rewards (for multiple reward card); defaults to `584` (which is stamp 3, 6 & 9).
        :param int stamped_status: Bitmask to indicate which positions on the stamp card have been stamped; defaults to `3` (stamp 1 & 2).
        :param str image_type: Indicates the image type to be rendered; defaults to `SVG`.   - svg: Renders the image as SVG (preferred).  - png: Renders the image as PNG.  - json: Returns the image as JSON object with image as bytes string.
        :return: LoopyGetImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['width', 'height', 'padding', 'total_stamps', 'stamp_image', 'unstamp_image', 'stamp_image_url', 'unstamp_image_url', 'background_colour', 'background_opacity', 'background_url', 'stamp_colour', 'stamp_opacity', 'unstamp_colour', 'unstamp_opacity', 'placeholders', 'placeholder_colour', 'placeholder_opacity', 'placeholder_border_colour', 'placeholder_border_opacity', 'rewards_placeholders', 'reward_border_colour', 'reward_border_opacity', 'reward_background_colour', 'reward_background_opacity', 'reward_positions', 'stamped_status', 'image_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_get_strip_image" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/images'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'width' in params:
            query_params['width'] = params['width']
        if 'height' in params:
            query_params['height'] = params['height']
        if 'padding' in params:
            query_params['padding'] = params['padding']
        if 'total_stamps' in params:
            query_params['totalStamps'] = params['total_stamps']
        if 'stamp_image' in params:
            query_params['stampImage'] = params['stamp_image']
        if 'unstamp_image' in params:
            query_params['unstampImage'] = params['unstamp_image']
        if 'stamp_image_url' in params:
            query_params['stampImageURL'] = params['stamp_image_url']
        if 'unstamp_image_url' in params:
            query_params['unstampImageURL'] = params['unstamp_image_url']
        if 'background_colour' in params:
            query_params['backgroundColour'] = params['background_colour']
        if 'background_opacity' in params:
            query_params['backgroundOpacity'] = params['background_opacity']
        if 'background_url' in params:
            query_params['backgroundURL'] = params['background_url']
        if 'stamp_colour' in params:
            query_params['stampColour'] = params['stamp_colour']
        if 'stamp_opacity' in params:
            query_params['stampOpacity'] = params['stamp_opacity']
        if 'unstamp_colour' in params:
            query_params['unstampColour'] = params['unstamp_colour']
        if 'unstamp_opacity' in params:
            query_params['unstampOpacity'] = params['unstamp_opacity']
        if 'placeholders' in params:
            query_params['placeholders'] = params['placeholders']
        if 'placeholder_colour' in params:
            query_params['placeholderColour'] = params['placeholder_colour']
        if 'placeholder_opacity' in params:
            query_params['placeholderOpacity'] = params['placeholder_opacity']
        if 'placeholder_border_colour' in params:
            query_params['placeholderBorderColour'] = params['placeholder_border_colour']
        if 'placeholder_border_opacity' in params:
            query_params['placeholderBorderOpacity'] = params['placeholder_border_opacity']
        if 'rewards_placeholders' in params:
            query_params['rewardsPlaceholders'] = params['rewards_placeholders']
        if 'reward_border_colour' in params:
            query_params['rewardBorderColour'] = params['reward_border_colour']
        if 'reward_border_opacity' in params:
            query_params['rewardBorderOpacity'] = params['reward_border_opacity']
        if 'reward_background_colour' in params:
            query_params['rewardBackgroundColour'] = params['reward_background_colour']
        if 'reward_background_opacity' in params:
            query_params['rewardBackgroundOpacity'] = params['reward_background_opacity']
        if 'reward_positions' in params:
            query_params['rewardPositions'] = params['reward_positions']
        if 'stamped_status' in params:
            query_params['stampedStatus'] = params['stamped_status']
        if 'image_type' in params:
            query_params['imageType'] = params['image_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyGetImageResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_get_strip_image_default_template(self, **kwargs):
        """
        Get default strip image template
        Returns the default strip image template. The default template can be used to configure the payload to pass to the '[Get strip image](#operation/LoopyLoyalty_getStripImage)' method in order to render a strip image for use within your platform or application.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_strip_image_default_template(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LoopyGetStripImageTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_get_strip_image_default_template_with_http_info(**kwargs)
        else:
            (data) = self.loopy_loyalty_get_strip_image_default_template_with_http_info(**kwargs)
            return data

    def loopy_loyalty_get_strip_image_default_template_with_http_info(self, **kwargs):
        """
        Get default strip image template
        Returns the default strip image template. The default template can be used to configure the payload to pass to the '[Get strip image](#operation/LoopyLoyalty_getStripImage)' method in order to render a strip image for use within your platform or application.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_strip_image_default_template_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LoopyGetStripImageTemplateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_get_strip_image_default_template" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/images/jsonTemplate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyGetStripImageTemplateResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_list_stamp_images(self, **kwargs):
        """
        List stamp images
        Lists all the default built-in stamp images that are provided by Loopy Loyalty. This endpoint does not return stamp images that were uploaded by the user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_list_stamp_images(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LoopyListStampImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_list_stamp_images_with_http_info(**kwargs)
        else:
            (data) = self.loopy_loyalty_list_stamp_images_with_http_info(**kwargs)
            return data

    def loopy_loyalty_list_stamp_images_with_http_info(self, **kwargs):
        """
        List stamp images
        Lists all the default built-in stamp images that are provided by Loopy Loyalty. This endpoint does not return stamp images that were uploaded by the user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_list_stamp_images_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: LoopyListStampImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_list_stamp_images" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/images/stampTemplates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyListStampImagesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

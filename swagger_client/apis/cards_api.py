# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CardsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def loopy_loyalty_delete_card(self, id, body, **kwargs):
        """
        Delete card (by ID)
        Deletes the card with ID `{id}`. This method is irreversible and will fully delete and invalidate the card & data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_delete_card(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The unique identifier to an object or record. (required)
        :param IoId body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_delete_card_with_http_info(id, body, **kwargs)
        else:
            (data) = self.loopy_loyalty_delete_card_with_http_info(id, body, **kwargs)
            return data

    def loopy_loyalty_delete_card_with_http_info(self, id, body, **kwargs):
        """
        Delete card (by ID)
        Deletes the card with ID `{id}`. This method is irreversible and will fully delete and invalidate the card & data.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_delete_card_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: The unique identifier to an object or record. (required)
        :param IoId body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_delete_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `loopy_loyalty_delete_card`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_delete_card`")

        resource_path = '/card/cid/{id}/delete'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopySuccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_get_card_by_id(self, cid, **kwargs):
        """
        Get card (by ID)
        Gets card with ID `{cid}`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_card_by_id(cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Card ID. Compressed 22 character UUID. (required)
        :param bool include_events: Includes the card events when getting the card.
        :param bool include_rewards: Includes the card rewards when getting the card.
        :return: LoopyGetCardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_get_card_by_id_with_http_info(cid, **kwargs)
        else:
            (data) = self.loopy_loyalty_get_card_by_id_with_http_info(cid, **kwargs)
            return data

    def loopy_loyalty_get_card_by_id_with_http_info(self, cid, **kwargs):
        """
        Get card (by ID)
        Gets card with ID `{cid}`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_card_by_id_with_http_info(cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Card ID. Compressed 22 character UUID. (required)
        :param bool include_events: Includes the card events when getting the card.
        :param bool include_rewards: Includes the card rewards when getting the card.
        :return: LoopyGetCardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'include_events', 'include_rewards']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_get_card_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `loopy_loyalty_get_card_by_id`")

        resource_path = '/card/{cid}'.replace('{format}', 'json')
        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = {}
        if 'include_events' in params:
            query_params['includeEvents'] = params['include_events']
        if 'include_rewards' in params:
            query_params['includeRewards'] = params['include_rewards']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyGetCardResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_get_card_by_unique_id(self, campaign_id, unique_id_type, unique_id_value, **kwargs):
        """
        Get card (by unique ID)
        Gets card with unique ID of `{uniqueIdType}` & `{uniqueIdValue}`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_card_by_unique_id(campaign_id, unique_id_type, unique_id_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: Campaign ID. Compressed 22 character UUID. (required)
        :param str unique_id_type: Unique ID type; `email`, `phone` or `text`. (required)
        :param str unique_id_value: Unique ID value. (required)
        :return: LoopyGetCardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_get_card_by_unique_id_with_http_info(campaign_id, unique_id_type, unique_id_value, **kwargs)
        else:
            (data) = self.loopy_loyalty_get_card_by_unique_id_with_http_info(campaign_id, unique_id_type, unique_id_value, **kwargs)
            return data

    def loopy_loyalty_get_card_by_unique_id_with_http_info(self, campaign_id, unique_id_type, unique_id_value, **kwargs):
        """
        Get card (by unique ID)
        Gets card with unique ID of `{uniqueIdType}` & `{uniqueIdValue}`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_get_card_by_unique_id_with_http_info(campaign_id, unique_id_type, unique_id_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: Campaign ID. Compressed 22 character UUID. (required)
        :param str unique_id_type: Unique ID type; `email`, `phone` or `text`. (required)
        :param str unique_id_value: Unique ID value. (required)
        :return: LoopyGetCardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'unique_id_type', 'unique_id_value']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_get_card_by_unique_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params) or (params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `loopy_loyalty_get_card_by_unique_id`")
        # verify the required parameter 'unique_id_type' is set
        if ('unique_id_type' not in params) or (params['unique_id_type'] is None):
            raise ValueError("Missing the required parameter `unique_id_type` when calling `loopy_loyalty_get_card_by_unique_id`")
        # verify the required parameter 'unique_id_value' is set
        if ('unique_id_value' not in params) or (params['unique_id_value'] is None):
            raise ValueError("Missing the required parameter `unique_id_value` when calling `loopy_loyalty_get_card_by_unique_id`")

        resource_path = '/uniquecard/campaignid/{campaignId}/{uniqueIdType}/{uniqueIdValue}'.replace('{format}', 'json')
        path_params = {}
        if 'campaign_id' in params:
            path_params['campaignId'] = params['campaign_id']
        if 'unique_id_type' in params:
            path_params['uniqueIdType'] = params['unique_id_type']
        if 'unique_id_value' in params:
            path_params['uniqueIdValue'] = params['unique_id_value']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyGetCardResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_list_cards(self, cid, body, **kwargs):
        """
        List cards
        Lists all the cards for campaign with ID `{cid}`. Provide querystring ``?count=true`` to return only the count instead of the matching records. If `count=true` then you can optionally set `filter` in the request to apply an additional filter to the count.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_list_cards(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Campaign ID: compressed 22 character UUID. (required)
        :param LoopyListCardsRequest body:  (required)
        :return: LoopyListCardsDataTableOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_list_cards_with_http_info(cid, body, **kwargs)
        else:
            (data) = self.loopy_loyalty_list_cards_with_http_info(cid, body, **kwargs)
            return data

    def loopy_loyalty_list_cards_with_http_info(self, cid, body, **kwargs):
        """
        List cards
        Lists all the cards for campaign with ID `{cid}`. Provide querystring ``?count=true`` to return only the count instead of the matching records. If `count=true` then you can optionally set `filter` in the request to apply an additional filter to the count.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_list_cards_with_http_info(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Campaign ID: compressed 22 character UUID. (required)
        :param LoopyListCardsRequest body:  (required)
        :return: LoopyListCardsDataTableOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_list_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `loopy_loyalty_list_cards`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_list_cards`")

        resource_path = '/card/cid/{cid}'.replace('{format}', 'json')
        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopyListCardsDataTableOutput',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_resync_card(self, cid, body, **kwargs):
        """
        Re-sync card
        Resync cards with ID `{cid}` with the Mobile Wallet. This is to be used when the card in wallet does not match the card or status in the Loopy Loyalty portal.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_resync_card(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Card ID. Compressed 22 character UUID. (required)
        :param LoopyResyncCardRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_resync_card_with_http_info(cid, body, **kwargs)
        else:
            (data) = self.loopy_loyalty_resync_card_with_http_info(cid, body, **kwargs)
            return data

    def loopy_loyalty_resync_card_with_http_info(self, cid, body, **kwargs):
        """
        Re-sync card
        Resync cards with ID `{cid}` with the Mobile Wallet. This is to be used when the card in wallet does not match the card or status in the Loopy Loyalty portal.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_resync_card_with_http_info(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Card ID. Compressed 22 character UUID. (required)
        :param LoopyResyncCardRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_resync_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `loopy_loyalty_resync_card`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_resync_card`")

        resource_path = '/card/cid/{cid}/resync'.replace('{format}', 'json')
        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopySuccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_send_message_to_all_cards(self, cid, body, **kwargs):
        """
        Send message to all cards
        Send message to all cards for campaign with ID `{cid}`. The payload can optionally contain a filter to narrow down the cards that will receive the message.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_send_message_to_all_cards(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Campaign ID: compressed 22 character UUID. (required)
        :param LoopySendMessageRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_send_message_to_all_cards_with_http_info(cid, body, **kwargs)
        else:
            (data) = self.loopy_loyalty_send_message_to_all_cards_with_http_info(cid, body, **kwargs)
            return data

    def loopy_loyalty_send_message_to_all_cards_with_http_info(self, cid, body, **kwargs):
        """
        Send message to all cards
        Send message to all cards for campaign with ID `{cid}`. The payload can optionally contain a filter to narrow down the cards that will receive the message.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_send_message_to_all_cards_with_http_info(cid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cid: Campaign ID: compressed 22 character UUID. (required)
        :param LoopySendMessageRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_send_message_to_all_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `loopy_loyalty_send_message_to_all_cards`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_send_message_to_all_cards`")

        resource_path = '/card/cid/{cid}/push'.replace('{format}', 'json')
        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopySuccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def loopy_loyalty_send_message_to_individual_card(self, body, **kwargs):
        """
        Send message to an individual card
        Sends a message to an individual card.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_send_message_to_individual_card(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoopyIndividualMessageRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.loopy_loyalty_send_message_to_individual_card_with_http_info(body, **kwargs)
        else:
            (data) = self.loopy_loyalty_send_message_to_individual_card_with_http_info(body, **kwargs)
            return data

    def loopy_loyalty_send_message_to_individual_card_with_http_info(self, body, **kwargs):
        """
        Send message to an individual card
        Sends a message to an individual card.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.loopy_loyalty_send_message_to_individual_card_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param LoopyIndividualMessageRequest body:  (required)
        :return: LoopySuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method loopy_loyalty_send_message_to_individual_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `loopy_loyalty_send_message_to_individual_card`")

        resource_path = '/card/push'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoopySuccessResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

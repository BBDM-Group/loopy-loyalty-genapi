# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyRedeemRewardsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cid=None, reward_type=None, rewards_to_redeem=None, scan_latitude=None, scan_longitude=None):
        """
        LoopyRedeemRewardsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cid': 'str',
            'reward_type': 'str',
            'rewards_to_redeem': 'str',
            'scan_latitude': 'float',
            'scan_longitude': 'float'
        }

        self.attribute_map = {
            'cid': 'cid',
            'reward_type': 'rewardType',
            'rewards_to_redeem': 'rewardsToRedeem',
            'scan_latitude': 'scanLatitude',
            'scan_longitude': 'scanLongitude'
        }

        self._cid = cid
        self._reward_type = reward_type
        self._rewards_to_redeem = rewards_to_redeem
        self._scan_latitude = scan_latitude
        self._scan_longitude = scan_longitude

    @property
    def cid(self):
        """
        Gets the cid of this LoopyRedeemRewardsRequest.
        Card ID. Compressed 22 character UUID. The Card ID is returned from the '[List Cards](#operation/LoopyLoyalty_listCards)' or '[Enrol customer](#operation/LoopyLoyalty_enrolMember)'.

        :return: The cid of this LoopyRedeemRewardsRequest.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """
        Sets the cid of this LoopyRedeemRewardsRequest.
        Card ID. Compressed 22 character UUID. The Card ID is returned from the '[List Cards](#operation/LoopyLoyalty_listCards)' or '[Enrol customer](#operation/LoopyLoyalty_enrolMember)'.

        :param cid: The cid of this LoopyRedeemRewardsRequest.
        :type: str
        """

        self._cid = cid

    @property
    def reward_type(self):
        """
        Gets the reward_type of this LoopyRedeemRewardsRequest.
        Reward type to redeem; index of the reward number (i.e. first reward = 1, second reward = 2, etc).

        :return: The reward_type of this LoopyRedeemRewardsRequest.
        :rtype: str
        """
        return self._reward_type

    @reward_type.setter
    def reward_type(self, reward_type):
        """
        Sets the reward_type of this LoopyRedeemRewardsRequest.
        Reward type to redeem; index of the reward number (i.e. first reward = 1, second reward = 2, etc).

        :param reward_type: The reward_type of this LoopyRedeemRewardsRequest.
        :type: str
        """

        self._reward_type = reward_type

    @property
    def rewards_to_redeem(self):
        """
        Gets the rewards_to_redeem of this LoopyRedeemRewardsRequest.
        Number of reward to redeem.

        :return: The rewards_to_redeem of this LoopyRedeemRewardsRequest.
        :rtype: str
        """
        return self._rewards_to_redeem

    @rewards_to_redeem.setter
    def rewards_to_redeem(self, rewards_to_redeem):
        """
        Sets the rewards_to_redeem of this LoopyRedeemRewardsRequest.
        Number of reward to redeem.

        :param rewards_to_redeem: The rewards_to_redeem of this LoopyRedeemRewardsRequest.
        :type: str
        """

        self._rewards_to_redeem = rewards_to_redeem

    @property
    def scan_latitude(self):
        """
        Gets the scan_latitude of this LoopyRedeemRewardsRequest.
        Latitude were the scan took place.

        :return: The scan_latitude of this LoopyRedeemRewardsRequest.
        :rtype: float
        """
        return self._scan_latitude

    @scan_latitude.setter
    def scan_latitude(self, scan_latitude):
        """
        Sets the scan_latitude of this LoopyRedeemRewardsRequest.
        Latitude were the scan took place.

        :param scan_latitude: The scan_latitude of this LoopyRedeemRewardsRequest.
        :type: float
        """

        self._scan_latitude = scan_latitude

    @property
    def scan_longitude(self):
        """
        Gets the scan_longitude of this LoopyRedeemRewardsRequest.
        Longitude were the scan took place.

        :return: The scan_longitude of this LoopyRedeemRewardsRequest.
        :rtype: float
        """
        return self._scan_longitude

    @scan_longitude.setter
    def scan_longitude(self, scan_longitude):
        """
        Sets the scan_longitude of this LoopyRedeemRewardsRequest.
        Longitude were the scan took place.

        :param scan_longitude: The scan_longitude of this LoopyRedeemRewardsRequest.
        :type: float
        """

        self._scan_longitude = scan_longitude

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyStripImage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, width=None, height=None, padding=None, total_stamps=None, stamp_image=None, unstamp_image=None, stamp_image_url=None, unstamp_image_url=None, background_colour=None, background_opacity=None, background_url=None, stamp_colour=None, stamp_opacity=None, unstamp_colour=None, unstamp_opacity=None, placeholders=None, placeholder_colour=None, placeholder_opacity=None, placeholder_border_colour=None, placeholder_border_opacity=None, rewards_placeholders=None, reward_border_colour=None, reward_border_opacity=None, reward_background_colour=None, reward_background_opacity=None, reward_positions=None, stamped_status=None, image_type=None):
        """
        LoopyStripImage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'width': 'int',
            'height': 'int',
            'padding': 'float',
            'total_stamps': 'int',
            'stamp_image': 'str',
            'unstamp_image': 'str',
            'stamp_image_url': 'str',
            'unstamp_image_url': 'str',
            'background_colour': 'str',
            'background_opacity': 'float',
            'background_url': 'str',
            'stamp_colour': 'str',
            'stamp_opacity': 'float',
            'unstamp_colour': 'str',
            'unstamp_opacity': 'float',
            'placeholders': 'bool',
            'placeholder_colour': 'str',
            'placeholder_opacity': 'float',
            'placeholder_border_colour': 'str',
            'placeholder_border_opacity': 'float',
            'rewards_placeholders': 'bool',
            'reward_border_colour': 'str',
            'reward_border_opacity': 'float',
            'reward_background_colour': 'str',
            'reward_background_opacity': 'float',
            'reward_positions': 'int',
            'stamped_status': 'int',
            'image_type': 'LoopyImageType'
        }

        self.attribute_map = {
            'width': 'width',
            'height': 'height',
            'padding': 'padding',
            'total_stamps': 'totalStamps',
            'stamp_image': 'stampImage',
            'unstamp_image': 'unstampImage',
            'stamp_image_url': 'stampImageURL',
            'unstamp_image_url': 'unstampImageURL',
            'background_colour': 'backgroundColour',
            'background_opacity': 'backgroundOpacity',
            'background_url': 'backgroundURL',
            'stamp_colour': 'stampColour',
            'stamp_opacity': 'stampOpacity',
            'unstamp_colour': 'unstampColour',
            'unstamp_opacity': 'unstampOpacity',
            'placeholders': 'placeholders',
            'placeholder_colour': 'placeholderColour',
            'placeholder_opacity': 'placeholderOpacity',
            'placeholder_border_colour': 'placeholderBorderColour',
            'placeholder_border_opacity': 'placeholderBorderOpacity',
            'rewards_placeholders': 'rewardsPlaceholders',
            'reward_border_colour': 'rewardBorderColour',
            'reward_border_opacity': 'rewardBorderOpacity',
            'reward_background_colour': 'rewardBackgroundColour',
            'reward_background_opacity': 'rewardBackgroundOpacity',
            'reward_positions': 'rewardPositions',
            'stamped_status': 'stampedStatus',
            'image_type': 'imageType'
        }

        self._width = width
        self._height = height
        self._padding = padding
        self._total_stamps = total_stamps
        self._stamp_image = stamp_image
        self._unstamp_image = unstamp_image
        self._stamp_image_url = stamp_image_url
        self._unstamp_image_url = unstamp_image_url
        self._background_colour = background_colour
        self._background_opacity = background_opacity
        self._background_url = background_url
        self._stamp_colour = stamp_colour
        self._stamp_opacity = stamp_opacity
        self._unstamp_colour = unstamp_colour
        self._unstamp_opacity = unstamp_opacity
        self._placeholders = placeholders
        self._placeholder_colour = placeholder_colour
        self._placeholder_opacity = placeholder_opacity
        self._placeholder_border_colour = placeholder_border_colour
        self._placeholder_border_opacity = placeholder_border_opacity
        self._rewards_placeholders = rewards_placeholders
        self._reward_border_colour = reward_border_colour
        self._reward_border_opacity = reward_border_opacity
        self._reward_background_colour = reward_background_colour
        self._reward_background_opacity = reward_background_opacity
        self._reward_positions = reward_positions
        self._stamped_status = stamped_status
        self._image_type = image_type

    @property
    def width(self):
        """
        Gets the width of this LoopyStripImage.
        Width of the strip image; default to `1125` (px).

        :return: The width of this LoopyStripImage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this LoopyStripImage.
        Width of the strip image; default to `1125` (px).

        :param width: The width of this LoopyStripImage.
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this LoopyStripImage.
        Height of the stripe image; defaults to `432` (px).

        :return: The height of this LoopyStripImage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this LoopyStripImage.
        Height of the stripe image; defaults to `432` (px).

        :param height: The height of this LoopyStripImage.
        :type: int
        """

        self._height = height

    @property
    def padding(self):
        """
        Gets the padding of this LoopyStripImage.
        Padding between stamps and the image edge; defaults to `40` (px).

        :return: The padding of this LoopyStripImage.
        :rtype: float
        """
        return self._padding

    @padding.setter
    def padding(self, padding):
        """
        Sets the padding of this LoopyStripImage.
        Padding between stamps and the image edge; defaults to `40` (px).

        :param padding: The padding of this LoopyStripImage.
        :type: float
        """

        self._padding = padding

    @property
    def total_stamps(self):
        """
        Gets the total_stamps of this LoopyStripImage.
        Total number of stamps to be rendered on the card. Can be between 1-30; defaults to `10`.

        :return: The total_stamps of this LoopyStripImage.
        :rtype: int
        """
        return self._total_stamps

    @total_stamps.setter
    def total_stamps(self, total_stamps):
        """
        Sets the total_stamps of this LoopyStripImage.
        Total number of stamps to be rendered on the card. Can be between 1-30; defaults to `10`.

        :param total_stamps: The total_stamps of this LoopyStripImage.
        :type: int
        """

        self._total_stamps = total_stamps

    @property
    def stamp_image(self):
        """
        Gets the stamp_image of this LoopyStripImage.
        Stamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.

        :return: The stamp_image of this LoopyStripImage.
        :rtype: str
        """
        return self._stamp_image

    @stamp_image.setter
    def stamp_image(self, stamp_image):
        """
        Sets the stamp_image of this LoopyStripImage.
        Stamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.

        :param stamp_image: The stamp_image of this LoopyStripImage.
        :type: str
        """

        self._stamp_image = stamp_image

    @property
    def unstamp_image(self):
        """
        Gets the unstamp_image of this LoopyStripImage.
        Unstamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.

        :return: The unstamp_image of this LoopyStripImage.
        :rtype: str
        """
        return self._unstamp_image

    @unstamp_image.setter
    def unstamp_image(self, unstamp_image):
        """
        Sets the unstamp_image of this LoopyStripImage.
        Unstamp image id. This needs to come from the pre-defined list of stamp images; defaults to `bagel`.

        :param unstamp_image: The unstamp_image of this LoopyStripImage.
        :type: str
        """

        self._unstamp_image = unstamp_image

    @property
    def stamp_image_url(self):
        """
        Gets the stamp_image_url of this LoopyStripImage.
        URL for a stamp image to use. If provided will be used instead of `stampImage`; defaults to blank.

        :return: The stamp_image_url of this LoopyStripImage.
        :rtype: str
        """
        return self._stamp_image_url

    @stamp_image_url.setter
    def stamp_image_url(self, stamp_image_url):
        """
        Sets the stamp_image_url of this LoopyStripImage.
        URL for a stamp image to use. If provided will be used instead of `stampImage`; defaults to blank.

        :param stamp_image_url: The stamp_image_url of this LoopyStripImage.
        :type: str
        """

        self._stamp_image_url = stamp_image_url

    @property
    def unstamp_image_url(self):
        """
        Gets the unstamp_image_url of this LoopyStripImage.
        URL for a unstamp image to use. If provided will be used instead of `unstampImage`; defaults to blank.

        :return: The unstamp_image_url of this LoopyStripImage.
        :rtype: str
        """
        return self._unstamp_image_url

    @unstamp_image_url.setter
    def unstamp_image_url(self, unstamp_image_url):
        """
        Sets the unstamp_image_url of this LoopyStripImage.
        URL for a unstamp image to use. If provided will be used instead of `unstampImage`; defaults to blank.

        :param unstamp_image_url: The unstamp_image_url of this LoopyStripImage.
        :type: str
        """

        self._unstamp_image_url = unstamp_image_url

    @property
    def background_colour(self):
        """
        Gets the background_colour of this LoopyStripImage.
        Hexcode for background colour; defaults to `#401A6B`.

        :return: The background_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._background_colour

    @background_colour.setter
    def background_colour(self, background_colour):
        """
        Sets the background_colour of this LoopyStripImage.
        Hexcode for background colour; defaults to `#401A6B`.

        :param background_colour: The background_colour of this LoopyStripImage.
        :type: str
        """

        self._background_colour = background_colour

    @property
    def background_opacity(self):
        """
        Gets the background_opacity of this LoopyStripImage.
        Opacity for the background, needs to be between 0.00-1.00; defaults to `1`.

        :return: The background_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._background_opacity

    @background_opacity.setter
    def background_opacity(self, background_opacity):
        """
        Sets the background_opacity of this LoopyStripImage.
        Opacity for the background, needs to be between 0.00-1.00; defaults to `1`.

        :param background_opacity: The background_opacity of this LoopyStripImage.
        :type: float
        """

        self._background_opacity = background_opacity

    @property
    def background_url(self):
        """
        Gets the background_url of this LoopyStripImage.
        URL for the background image to use; defaults to blank.

        :return: The background_url of this LoopyStripImage.
        :rtype: str
        """
        return self._background_url

    @background_url.setter
    def background_url(self, background_url):
        """
        Sets the background_url of this LoopyStripImage.
        URL for the background image to use; defaults to blank.

        :param background_url: The background_url of this LoopyStripImage.
        :type: str
        """

        self._background_url = background_url

    @property
    def stamp_colour(self):
        """
        Gets the stamp_colour of this LoopyStripImage.
        Hexcode for stamp colour; defaults to `#FFFFFF`.

        :return: The stamp_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._stamp_colour

    @stamp_colour.setter
    def stamp_colour(self, stamp_colour):
        """
        Sets the stamp_colour of this LoopyStripImage.
        Hexcode for stamp colour; defaults to `#FFFFFF`.

        :param stamp_colour: The stamp_colour of this LoopyStripImage.
        :type: str
        """

        self._stamp_colour = stamp_colour

    @property
    def stamp_opacity(self):
        """
        Gets the stamp_opacity of this LoopyStripImage.
        Opacity for the stamp image, needs to be between 0.00-1.00; defaults to `1`.

        :return: The stamp_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._stamp_opacity

    @stamp_opacity.setter
    def stamp_opacity(self, stamp_opacity):
        """
        Sets the stamp_opacity of this LoopyStripImage.
        Opacity for the stamp image, needs to be between 0.00-1.00; defaults to `1`.

        :param stamp_opacity: The stamp_opacity of this LoopyStripImage.
        :type: float
        """

        self._stamp_opacity = stamp_opacity

    @property
    def unstamp_colour(self):
        """
        Gets the unstamp_colour of this LoopyStripImage.
        Hexcode for unstamped colour; defaults to `#FFFFFF`.

        :return: The unstamp_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._unstamp_colour

    @unstamp_colour.setter
    def unstamp_colour(self, unstamp_colour):
        """
        Sets the unstamp_colour of this LoopyStripImage.
        Hexcode for unstamped colour; defaults to `#FFFFFF`.

        :param unstamp_colour: The unstamp_colour of this LoopyStripImage.
        :type: str
        """

        self._unstamp_colour = unstamp_colour

    @property
    def unstamp_opacity(self):
        """
        Gets the unstamp_opacity of this LoopyStripImage.
        Opacity for the unstamped image, needs to be between 0.00-1.00; defaults to `0.25`.

        :return: The unstamp_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._unstamp_opacity

    @unstamp_opacity.setter
    def unstamp_opacity(self, unstamp_opacity):
        """
        Sets the unstamp_opacity of this LoopyStripImage.
        Opacity for the unstamped image, needs to be between 0.00-1.00; defaults to `0.25`.

        :param unstamp_opacity: The unstamp_opacity of this LoopyStripImage.
        :type: float
        """

        self._unstamp_opacity = unstamp_opacity

    @property
    def placeholders(self):
        """
        Gets the placeholders of this LoopyStripImage.
        Indicates if stamp placeholders should be rendered; defaults to `true`.

        :return: The placeholders of this LoopyStripImage.
        :rtype: bool
        """
        return self._placeholders

    @placeholders.setter
    def placeholders(self, placeholders):
        """
        Sets the placeholders of this LoopyStripImage.
        Indicates if stamp placeholders should be rendered; defaults to `true`.

        :param placeholders: The placeholders of this LoopyStripImage.
        :type: bool
        """

        self._placeholders = placeholders

    @property
    def placeholder_colour(self):
        """
        Gets the placeholder_colour of this LoopyStripImage.
        Hexcode for placeholder colour; defaults to `#6B1D5E`.

        :return: The placeholder_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._placeholder_colour

    @placeholder_colour.setter
    def placeholder_colour(self, placeholder_colour):
        """
        Sets the placeholder_colour of this LoopyStripImage.
        Hexcode for placeholder colour; defaults to `#6B1D5E`.

        :param placeholder_colour: The placeholder_colour of this LoopyStripImage.
        :type: str
        """

        self._placeholder_colour = placeholder_colour

    @property
    def placeholder_opacity(self):
        """
        Gets the placeholder_opacity of this LoopyStripImage.
        Opacity for the placeholder, needs to be between 0.00-1.00; defaults to `1`.

        :return: The placeholder_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._placeholder_opacity

    @placeholder_opacity.setter
    def placeholder_opacity(self, placeholder_opacity):
        """
        Sets the placeholder_opacity of this LoopyStripImage.
        Opacity for the placeholder, needs to be between 0.00-1.00; defaults to `1`.

        :param placeholder_opacity: The placeholder_opacity of this LoopyStripImage.
        :type: float
        """

        self._placeholder_opacity = placeholder_opacity

    @property
    def placeholder_border_colour(self):
        """
        Gets the placeholder_border_colour of this LoopyStripImage.
        Hexcode for placeholder border colour; defaults to `#177BE3`.

        :return: The placeholder_border_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._placeholder_border_colour

    @placeholder_border_colour.setter
    def placeholder_border_colour(self, placeholder_border_colour):
        """
        Sets the placeholder_border_colour of this LoopyStripImage.
        Hexcode for placeholder border colour; defaults to `#177BE3`.

        :param placeholder_border_colour: The placeholder_border_colour of this LoopyStripImage.
        :type: str
        """

        self._placeholder_border_colour = placeholder_border_colour

    @property
    def placeholder_border_opacity(self):
        """
        Gets the placeholder_border_opacity of this LoopyStripImage.
        Opacity for the placeholder border, needs to be between 0.00-1.00; defaults to `1`.

        :return: The placeholder_border_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._placeholder_border_opacity

    @placeholder_border_opacity.setter
    def placeholder_border_opacity(self, placeholder_border_opacity):
        """
        Sets the placeholder_border_opacity of this LoopyStripImage.
        Opacity for the placeholder border, needs to be between 0.00-1.00; defaults to `1`.

        :param placeholder_border_opacity: The placeholder_border_opacity of this LoopyStripImage.
        :type: float
        """

        self._placeholder_border_opacity = placeholder_border_opacity

    @property
    def rewards_placeholders(self):
        """
        Gets the rewards_placeholders of this LoopyStripImage.
        Indicates if reward place holders should be rendered; defaults to `true`.

        :return: The rewards_placeholders of this LoopyStripImage.
        :rtype: bool
        """
        return self._rewards_placeholders

    @rewards_placeholders.setter
    def rewards_placeholders(self, rewards_placeholders):
        """
        Sets the rewards_placeholders of this LoopyStripImage.
        Indicates if reward place holders should be rendered; defaults to `true`.

        :param rewards_placeholders: The rewards_placeholders of this LoopyStripImage.
        :type: bool
        """

        self._rewards_placeholders = rewards_placeholders

    @property
    def reward_border_colour(self):
        """
        Gets the reward_border_colour of this LoopyStripImage.
        Hexcode for reward border colour; defaults to `#EBFF10`.

        :return: The reward_border_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._reward_border_colour

    @reward_border_colour.setter
    def reward_border_colour(self, reward_border_colour):
        """
        Sets the reward_border_colour of this LoopyStripImage.
        Hexcode for reward border colour; defaults to `#EBFF10`.

        :param reward_border_colour: The reward_border_colour of this LoopyStripImage.
        :type: str
        """

        self._reward_border_colour = reward_border_colour

    @property
    def reward_border_opacity(self):
        """
        Gets the reward_border_opacity of this LoopyStripImage.
        Opacity for the reward border, needs to be between 0.00-1.00; defaults to `1`.

        :return: The reward_border_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._reward_border_opacity

    @reward_border_opacity.setter
    def reward_border_opacity(self, reward_border_opacity):
        """
        Sets the reward_border_opacity of this LoopyStripImage.
        Opacity for the reward border, needs to be between 0.00-1.00; defaults to `1`.

        :param reward_border_opacity: The reward_border_opacity of this LoopyStripImage.
        :type: float
        """

        self._reward_border_opacity = reward_border_opacity

    @property
    def reward_background_colour(self):
        """
        Gets the reward_background_colour of this LoopyStripImage.
        Hexcode for reward background colour; defaults to `#808548`.

        :return: The reward_background_colour of this LoopyStripImage.
        :rtype: str
        """
        return self._reward_background_colour

    @reward_background_colour.setter
    def reward_background_colour(self, reward_background_colour):
        """
        Sets the reward_background_colour of this LoopyStripImage.
        Hexcode for reward background colour; defaults to `#808548`.

        :param reward_background_colour: The reward_background_colour of this LoopyStripImage.
        :type: str
        """

        self._reward_background_colour = reward_background_colour

    @property
    def reward_background_opacity(self):
        """
        Gets the reward_background_opacity of this LoopyStripImage.
        Opacity for the reward background, needs to be between 0.00-1.00; defaults to `1`.

        :return: The reward_background_opacity of this LoopyStripImage.
        :rtype: float
        """
        return self._reward_background_opacity

    @reward_background_opacity.setter
    def reward_background_opacity(self, reward_background_opacity):
        """
        Sets the reward_background_opacity of this LoopyStripImage.
        Opacity for the reward background, needs to be between 0.00-1.00; defaults to `1`.

        :param reward_background_opacity: The reward_background_opacity of this LoopyStripImage.
        :type: float
        """

        self._reward_background_opacity = reward_background_opacity

    @property
    def reward_positions(self):
        """
        Gets the reward_positions of this LoopyStripImage.
        Bitmask to indicate the positions of the rewards (for multiple reward card); defaults to `584` (which is stamp 3, 6 & 9).

        :return: The reward_positions of this LoopyStripImage.
        :rtype: int
        """
        return self._reward_positions

    @reward_positions.setter
    def reward_positions(self, reward_positions):
        """
        Sets the reward_positions of this LoopyStripImage.
        Bitmask to indicate the positions of the rewards (for multiple reward card); defaults to `584` (which is stamp 3, 6 & 9).

        :param reward_positions: The reward_positions of this LoopyStripImage.
        :type: int
        """

        self._reward_positions = reward_positions

    @property
    def stamped_status(self):
        """
        Gets the stamped_status of this LoopyStripImage.
        Bitmask to indicate which positions on the stamp card have been stamped; defaults to `3` (stamp 1 & 2).

        :return: The stamped_status of this LoopyStripImage.
        :rtype: int
        """
        return self._stamped_status

    @stamped_status.setter
    def stamped_status(self, stamped_status):
        """
        Sets the stamped_status of this LoopyStripImage.
        Bitmask to indicate which positions on the stamp card have been stamped; defaults to `3` (stamp 1 & 2).

        :param stamped_status: The stamped_status of this LoopyStripImage.
        :type: int
        """

        self._stamped_status = stamped_status

    @property
    def image_type(self):
        """
        Gets the image_type of this LoopyStripImage.
        Indicates the image type to be rendered; defaults to `SVG`.

        :return: The image_type of this LoopyStripImage.
        :rtype: LoopyImageType
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """
        Sets the image_type of this LoopyStripImage.
        Indicates the image type to be rendered; defaults to `SVG`.

        :param image_type: The image_type of this LoopyStripImage.
        :type: LoopyImageType
        """

        self._image_type = image_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

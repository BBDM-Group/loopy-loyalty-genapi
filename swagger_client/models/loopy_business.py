# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyBusiness(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, website=None, address_line1=None, address_line2=None, city=None, state_province_region=None, zip=None, country=None, email=None, phone=None):
        """
        LoopyBusiness - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'website': 'str',
            'address_line1': 'str',
            'address_line2': 'str',
            'city': 'str',
            'state_province_region': 'str',
            'zip': 'str',
            'country': 'str',
            'email': 'str',
            'phone': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'website': 'website',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'city': 'city',
            'state_province_region': 'stateProvinceRegion',
            'zip': 'zip',
            'country': 'country',
            'email': 'email',
            'phone': 'phone'
        }

        self._name = name
        self._website = website
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._city = city
        self._state_province_region = state_province_region
        self._zip = zip
        self._country = country
        self._email = email
        self._phone = phone

    @property
    def name(self):
        """
        Gets the name of this LoopyBusiness.
        Business name.

        :return: The name of this LoopyBusiness.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LoopyBusiness.
        Business name.

        :param name: The name of this LoopyBusiness.
        :type: str
        """

        self._name = name

    @property
    def website(self):
        """
        Gets the website of this LoopyBusiness.
        Business website.

        :return: The website of this LoopyBusiness.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this LoopyBusiness.
        Business website.

        :param website: The website of this LoopyBusiness.
        :type: str
        """

        self._website = website

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this LoopyBusiness.
        Business address line 1.

        :return: The address_line1 of this LoopyBusiness.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this LoopyBusiness.
        Business address line 1.

        :param address_line1: The address_line1 of this LoopyBusiness.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this LoopyBusiness.
        Business address line 2.

        :return: The address_line2 of this LoopyBusiness.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this LoopyBusiness.
        Business address line 2.

        :param address_line2: The address_line2 of this LoopyBusiness.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """
        Gets the city of this LoopyBusiness.
        City the business is located in.

        :return: The city of this LoopyBusiness.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this LoopyBusiness.
        City the business is located in.

        :param city: The city of this LoopyBusiness.
        :type: str
        """

        self._city = city

    @property
    def state_province_region(self):
        """
        Gets the state_province_region of this LoopyBusiness.
        State / province / region the business is located in.

        :return: The state_province_region of this LoopyBusiness.
        :rtype: str
        """
        return self._state_province_region

    @state_province_region.setter
    def state_province_region(self, state_province_region):
        """
        Sets the state_province_region of this LoopyBusiness.
        State / province / region the business is located in.

        :param state_province_region: The state_province_region of this LoopyBusiness.
        :type: str
        """

        self._state_province_region = state_province_region

    @property
    def zip(self):
        """
        Gets the zip of this LoopyBusiness.
        Business zip code.

        :return: The zip of this LoopyBusiness.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this LoopyBusiness.
        Business zip code.

        :param zip: The zip of this LoopyBusiness.
        :type: str
        """

        self._zip = zip

    @property
    def country(self):
        """
        Gets the country of this LoopyBusiness.
        Country the business is located in.

        :return: The country of this LoopyBusiness.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this LoopyBusiness.
        Country the business is located in.

        :param country: The country of this LoopyBusiness.
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """
        Gets the email of this LoopyBusiness.
        The business email address.

        :return: The email of this LoopyBusiness.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this LoopyBusiness.
        The business email address.

        :param email: The email of this LoopyBusiness.
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this LoopyBusiness.
        The business phone number.

        :return: The phone of this LoopyBusiness.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this LoopyBusiness.
        The business phone number.

        :param phone: The phone of this LoopyBusiness.
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

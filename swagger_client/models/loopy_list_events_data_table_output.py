# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyListEventsDataTableOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, records_total=None, records_filtered=None, data=None, error=None):
        """
        LoopyListEventsDataTableOutput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'records_total': 'str',
            'records_filtered': 'str',
            'data': 'list[LoopyEvent]',
            'error': 'str'
        }

        self.attribute_map = {
            'records_total': 'recordsTotal',
            'records_filtered': 'recordsFiltered',
            'data': 'data',
            'error': 'error'
        }

        self._records_total = records_total
        self._records_filtered = records_filtered
        self._data = data
        self._error = error

    @property
    def records_total(self):
        """
        Gets the records_total of this LoopyListEventsDataTableOutput.
        Total number of records that match the input query.

        :return: The records_total of this LoopyListEventsDataTableOutput.
        :rtype: str
        """
        return self._records_total

    @records_total.setter
    def records_total(self, records_total):
        """
        Sets the records_total of this LoopyListEventsDataTableOutput.
        Total number of records that match the input query.

        :param records_total: The records_total of this LoopyListEventsDataTableOutput.
        :type: str
        """

        self._records_total = records_total

    @property
    def records_filtered(self):
        """
        Gets the records_filtered of this LoopyListEventsDataTableOutput.
        Number of records that match the `dt.search` value.

        :return: The records_filtered of this LoopyListEventsDataTableOutput.
        :rtype: str
        """
        return self._records_filtered

    @records_filtered.setter
    def records_filtered(self, records_filtered):
        """
        Sets the records_filtered of this LoopyListEventsDataTableOutput.
        Number of records that match the `dt.search` value.

        :param records_filtered: The records_filtered of this LoopyListEventsDataTableOutput.
        :type: str
        """

        self._records_filtered = records_filtered

    @property
    def data(self):
        """
        Gets the data of this LoopyListEventsDataTableOutput.
        Array of event records.

        :return: The data of this LoopyListEventsDataTableOutput.
        :rtype: list[LoopyEvent]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this LoopyListEventsDataTableOutput.
        Array of event records.

        :param data: The data of this LoopyListEventsDataTableOutput.
        :type: list[LoopyEvent]
        """

        self._data = data

    @property
    def error(self):
        """
        Gets the error of this LoopyListEventsDataTableOutput.
        Set in case of error.

        :return: The error of this LoopyListEventsDataTableOutput.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this LoopyListEventsDataTableOutput.
        Set in case of error.

        :param error: The error of this LoopyListEventsDataTableOutput.
        :type: str
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

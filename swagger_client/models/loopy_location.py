# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyLocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uid=None, name=None, alt=None, lat=None, lon=None, address=None, address_on_card=None, message=None, show_address_on_card=None):
        """
        LoopyLocation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'uid': 'str',
            'name': 'str',
            'alt': 'float',
            'lat': 'float',
            'lon': 'float',
            'address': 'str',
            'address_on_card': 'str',
            'message': 'str',
            'show_address_on_card': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'uid': 'uid',
            'name': 'name',
            'alt': 'alt',
            'lat': 'lat',
            'lon': 'lon',
            'address': 'address',
            'address_on_card': 'addressOnCard',
            'message': 'message',
            'show_address_on_card': 'showAddressOnCard'
        }

        self._id = id
        self._uid = uid
        self._name = name
        self._alt = alt
        self._lat = lat
        self._lon = lon
        self._address = address
        self._address_on_card = address_on_card
        self._message = message
        self._show_address_on_card = show_address_on_card

    @property
    def id(self):
        """
        Gets the id of this LoopyLocation.
        Location ID. compressed 22 character UUID; auto generated.

        :return: The id of this LoopyLocation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyLocation.
        Location ID. compressed 22 character UUID; auto generated.

        :param id: The id of this LoopyLocation.
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """
        Gets the uid of this LoopyLocation.
        User ID of the user the location belongs to: compressed 22 character UUID. Read only; set by system.

        :return: The uid of this LoopyLocation.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this LoopyLocation.
        User ID of the user the location belongs to: compressed 22 character UUID. Read only; set by system.

        :param uid: The uid of this LoopyLocation.
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this LoopyLocation.
        Location name.

        :return: The name of this LoopyLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LoopyLocation.
        Location name.

        :param name: The name of this LoopyLocation.
        :type: str
        """

        self._name = name

    @property
    def alt(self):
        """
        Gets the alt of this LoopyLocation.
        Altitude.

        :return: The alt of this LoopyLocation.
        :rtype: float
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """
        Sets the alt of this LoopyLocation.
        Altitude.

        :param alt: The alt of this LoopyLocation.
        :type: float
        """

        self._alt = alt

    @property
    def lat(self):
        """
        Gets the lat of this LoopyLocation.
        Latitude.

        :return: The lat of this LoopyLocation.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """
        Sets the lat of this LoopyLocation.
        Latitude.

        :param lat: The lat of this LoopyLocation.
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """
        Gets the lon of this LoopyLocation.
        Longitude.

        :return: The lon of this LoopyLocation.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """
        Sets the lon of this LoopyLocation.
        Longitude.

        :param lon: The lon of this LoopyLocation.
        :type: float
        """

        self._lon = lon

    @property
    def address(self):
        """
        Gets the address of this LoopyLocation.
        Human readable address of the location.

        :return: The address of this LoopyLocation.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this LoopyLocation.
        Human readable address of the location.

        :param address: The address of this LoopyLocation.
        :type: str
        """

        self._address = address

    @property
    def address_on_card(self):
        """
        Gets the address_on_card of this LoopyLocation.
        Human readable address, including organization name, which is used for rendering on the card.

        :return: The address_on_card of this LoopyLocation.
        :rtype: str
        """
        return self._address_on_card

    @address_on_card.setter
    def address_on_card(self, address_on_card):
        """
        Sets the address_on_card of this LoopyLocation.
        Human readable address, including organization name, which is used for rendering on the card.

        :param address_on_card: The address_on_card of this LoopyLocation.
        :type: str
        """

        self._address_on_card = address_on_card

    @property
    def message(self):
        """
        Gets the message of this LoopyLocation.
        Message shown on the lock-screen when a customer is in the GPS range.

        :return: The message of this LoopyLocation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this LoopyLocation.
        Message shown on the lock-screen when a customer is in the GPS range.

        :param message: The message of this LoopyLocation.
        :type: str
        """

        self._message = message

    @property
    def show_address_on_card(self):
        """
        Gets the show_address_on_card of this LoopyLocation.
        Indicates if the address is show on the card design.

        :return: The show_address_on_card of this LoopyLocation.
        :rtype: bool
        """
        return self._show_address_on_card

    @show_address_on_card.setter
    def show_address_on_card(self, show_address_on_card):
        """
        Sets the show_address_on_card of this LoopyLocation.
        Indicates if the address is show on the card design.

        :param show_address_on_card: The show_address_on_card of this LoopyLocation.
        :type: bool
        """

        self._show_address_on_card = show_address_on_card

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyIP(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, remote=None, country=None, country_code=None, city=None, continent=None, timezone=None):
        """
        LoopyIP - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'remote': 'str',
            'country': 'str',
            'country_code': 'str',
            'city': 'str',
            'continent': 'str',
            'timezone': 'str'
        }

        self.attribute_map = {
            'remote': 'remote',
            'country': 'country',
            'country_code': 'countryCode',
            'city': 'city',
            'continent': 'continent',
            'timezone': 'timezone'
        }

        self._remote = remote
        self._country = country
        self._country_code = country_code
        self._city = city
        self._continent = continent
        self._timezone = timezone

    @property
    def remote(self):
        """
        Gets the remote of this LoopyIP.


        :return: The remote of this LoopyIP.
        :rtype: str
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """
        Sets the remote of this LoopyIP.


        :param remote: The remote of this LoopyIP.
        :type: str
        """

        self._remote = remote

    @property
    def country(self):
        """
        Gets the country of this LoopyIP.


        :return: The country of this LoopyIP.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this LoopyIP.


        :param country: The country of this LoopyIP.
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """
        Gets the country_code of this LoopyIP.


        :return: The country_code of this LoopyIP.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this LoopyIP.


        :param country_code: The country_code of this LoopyIP.
        :type: str
        """

        self._country_code = country_code

    @property
    def city(self):
        """
        Gets the city of this LoopyIP.


        :return: The city of this LoopyIP.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this LoopyIP.


        :param city: The city of this LoopyIP.
        :type: str
        """

        self._city = city

    @property
    def continent(self):
        """
        Gets the continent of this LoopyIP.


        :return: The continent of this LoopyIP.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """
        Sets the continent of this LoopyIP.


        :param continent: The continent of this LoopyIP.
        :type: str
        """

        self._continent = continent

    @property
    def timezone(self):
        """
        Gets the timezone of this LoopyIP.


        :return: The timezone of this LoopyIP.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this LoopyIP.


        :param timezone: The timezone of this LoopyIP.
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

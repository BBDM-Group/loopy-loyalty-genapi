# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uid=None, campaign_id=None, pass_status=None, operating_system=None, current_stamp_image=None, total_stamps_earned=None, total_rewards_earned=None, total_rewards_redeemed=None, last_stamp_earned_date=None, current_reward_status=None, last_reward_earned_date=None, last_reward_redeemed_date=None, customer_details=None, create_year=None, create_month=None, create_day=None, unique_ids=None, expiry=None, opt_out=None, create_time=None, update_time=None):
        """
        LoopyCard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'uid': 'str',
            'campaign_id': 'str',
            'pass_status': 'LoopyPassType',
            'operating_system': 'str',
            'current_stamp_image': 'LoopyStripImage',
            'total_stamps_earned': 'str',
            'total_rewards_earned': 'str',
            'total_rewards_redeemed': 'str',
            'last_stamp_earned_date': 'str',
            'current_reward_status': 'dict(str, int)',
            'last_reward_earned_date': 'str',
            'last_reward_redeemed_date': 'str',
            'customer_details': 'dict(str, str)',
            'create_year': 'int',
            'create_month': 'int',
            'create_day': 'int',
            'unique_ids': 'LoopyCardUniqueIds',
            'expiry': 'str',
            'opt_out': 'bool',
            'create_time': 'str',
            'update_time': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'uid': 'uid',
            'campaign_id': 'campaignId',
            'pass_status': 'passStatus',
            'operating_system': 'operatingSystem',
            'current_stamp_image': 'currentStampImage',
            'total_stamps_earned': 'totalStampsEarned',
            'total_rewards_earned': 'totalRewardsEarned',
            'total_rewards_redeemed': 'totalRewardsRedeemed',
            'last_stamp_earned_date': 'lastStampEarnedDate',
            'current_reward_status': 'currentRewardStatus',
            'last_reward_earned_date': 'lastRewardEarnedDate',
            'last_reward_redeemed_date': 'lastRewardRedeemedDate',
            'customer_details': 'customerDetails',
            'create_year': 'createYear',
            'create_month': 'createMonth',
            'create_day': 'createDay',
            'unique_ids': 'uniqueIds',
            'expiry': 'expiry',
            'opt_out': 'optOut',
            'create_time': 'createTime',
            'update_time': 'updateTime'
        }

        self._id = id
        self._uid = uid
        self._campaign_id = campaign_id
        self._pass_status = pass_status
        self._operating_system = operating_system
        self._current_stamp_image = current_stamp_image
        self._total_stamps_earned = total_stamps_earned
        self._total_rewards_earned = total_rewards_earned
        self._total_rewards_redeemed = total_rewards_redeemed
        self._last_stamp_earned_date = last_stamp_earned_date
        self._current_reward_status = current_reward_status
        self._last_reward_earned_date = last_reward_earned_date
        self._last_reward_redeemed_date = last_reward_redeemed_date
        self._customer_details = customer_details
        self._create_year = create_year
        self._create_month = create_month
        self._create_day = create_day
        self._unique_ids = unique_ids
        self._expiry = expiry
        self._opt_out = opt_out
        self._create_time = create_time
        self._update_time = update_time

    @property
    def id(self):
        """
        Gets the id of this LoopyCard.
        Card ID: compressed 22 character UUID.

        :return: The id of this LoopyCard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyCard.
        Card ID: compressed 22 character UUID.

        :param id: The id of this LoopyCard.
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """
        Gets the uid of this LoopyCard.
        User ID of the user the card belongs to: compressed 22 character UUID.

        :return: The uid of this LoopyCard.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this LoopyCard.
        User ID of the user the card belongs to: compressed 22 character UUID.

        :param uid: The uid of this LoopyCard.
        :type: str
        """

        self._uid = uid

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this LoopyCard.
        Campaign ID the card belongs to: compressed 22 character UUID.

        :return: The campaign_id of this LoopyCard.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this LoopyCard.
        Campaign ID the card belongs to: compressed 22 character UUID.

        :param campaign_id: The campaign_id of this LoopyCard.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def pass_status(self):
        """
        Gets the pass_status of this LoopyCard.
        The pass status of the pass (issued, installed, removed or invalidated).

        :return: The pass_status of this LoopyCard.
        :rtype: LoopyPassType
        """
        return self._pass_status

    @pass_status.setter
    def pass_status(self, pass_status):
        """
        Sets the pass_status of this LoopyCard.
        The pass status of the pass (issued, installed, removed or invalidated).

        :param pass_status: The pass_status of this LoopyCard.
        :type: LoopyPassType
        """

        self._pass_status = pass_status

    @property
    def operating_system(self):
        """
        Gets the operating_system of this LoopyCard.
        The operating system the pass installed in.

        :return: The operating_system of this LoopyCard.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """
        Sets the operating_system of this LoopyCard.
        The operating system the pass installed in.

        :param operating_system: The operating_system of this LoopyCard.
        :type: str
        """

        self._operating_system = operating_system

    @property
    def current_stamp_image(self):
        """
        Gets the current_stamp_image of this LoopyCard.
        The current stamp image. Can be used to render the stamp image in another application.

        :return: The current_stamp_image of this LoopyCard.
        :rtype: LoopyStripImage
        """
        return self._current_stamp_image

    @current_stamp_image.setter
    def current_stamp_image(self, current_stamp_image):
        """
        Sets the current_stamp_image of this LoopyCard.
        The current stamp image. Can be used to render the stamp image in another application.

        :param current_stamp_image: The current_stamp_image of this LoopyCard.
        :type: LoopyStripImage
        """

        self._current_stamp_image = current_stamp_image

    @property
    def total_stamps_earned(self):
        """
        Gets the total_stamps_earned of this LoopyCard.
        Lifetime stamps earned.

        :return: The total_stamps_earned of this LoopyCard.
        :rtype: str
        """
        return self._total_stamps_earned

    @total_stamps_earned.setter
    def total_stamps_earned(self, total_stamps_earned):
        """
        Sets the total_stamps_earned of this LoopyCard.
        Lifetime stamps earned.

        :param total_stamps_earned: The total_stamps_earned of this LoopyCard.
        :type: str
        """

        self._total_stamps_earned = total_stamps_earned

    @property
    def total_rewards_earned(self):
        """
        Gets the total_rewards_earned of this LoopyCard.
        Lifetime rewards earned.

        :return: The total_rewards_earned of this LoopyCard.
        :rtype: str
        """
        return self._total_rewards_earned

    @total_rewards_earned.setter
    def total_rewards_earned(self, total_rewards_earned):
        """
        Sets the total_rewards_earned of this LoopyCard.
        Lifetime rewards earned.

        :param total_rewards_earned: The total_rewards_earned of this LoopyCard.
        :type: str
        """

        self._total_rewards_earned = total_rewards_earned

    @property
    def total_rewards_redeemed(self):
        """
        Gets the total_rewards_redeemed of this LoopyCard.
        Lifetime rewards redeemed.

        :return: The total_rewards_redeemed of this LoopyCard.
        :rtype: str
        """
        return self._total_rewards_redeemed

    @total_rewards_redeemed.setter
    def total_rewards_redeemed(self, total_rewards_redeemed):
        """
        Sets the total_rewards_redeemed of this LoopyCard.
        Lifetime rewards redeemed.

        :param total_rewards_redeemed: The total_rewards_redeemed of this LoopyCard.
        :type: str
        """

        self._total_rewards_redeemed = total_rewards_redeemed

    @property
    def last_stamp_earned_date(self):
        """
        Gets the last_stamp_earned_date of this LoopyCard.
        ISO8601 formatted date of when the last stamp was earned.

        :return: The last_stamp_earned_date of this LoopyCard.
        :rtype: str
        """
        return self._last_stamp_earned_date

    @last_stamp_earned_date.setter
    def last_stamp_earned_date(self, last_stamp_earned_date):
        """
        Sets the last_stamp_earned_date of this LoopyCard.
        ISO8601 formatted date of when the last stamp was earned.

        :param last_stamp_earned_date: The last_stamp_earned_date of this LoopyCard.
        :type: str
        """

        self._last_stamp_earned_date = last_stamp_earned_date

    @property
    def current_reward_status(self):
        """
        Gets the current_reward_status of this LoopyCard.
        Map of the current rewards. Key is the reward index (starting at 1), value is the quantity of rewards the customer is entitled to at this point in time.

        :return: The current_reward_status of this LoopyCard.
        :rtype: dict(str, int)
        """
        return self._current_reward_status

    @current_reward_status.setter
    def current_reward_status(self, current_reward_status):
        """
        Sets the current_reward_status of this LoopyCard.
        Map of the current rewards. Key is the reward index (starting at 1), value is the quantity of rewards the customer is entitled to at this point in time.

        :param current_reward_status: The current_reward_status of this LoopyCard.
        :type: dict(str, int)
        """

        self._current_reward_status = current_reward_status

    @property
    def last_reward_earned_date(self):
        """
        Gets the last_reward_earned_date of this LoopyCard.
        ISO8601 formatted date of when the last reward was earned.

        :return: The last_reward_earned_date of this LoopyCard.
        :rtype: str
        """
        return self._last_reward_earned_date

    @last_reward_earned_date.setter
    def last_reward_earned_date(self, last_reward_earned_date):
        """
        Sets the last_reward_earned_date of this LoopyCard.
        ISO8601 formatted date of when the last reward was earned.

        :param last_reward_earned_date: The last_reward_earned_date of this LoopyCard.
        :type: str
        """

        self._last_reward_earned_date = last_reward_earned_date

    @property
    def last_reward_redeemed_date(self):
        """
        Gets the last_reward_redeemed_date of this LoopyCard.
        ISO8601 formatted date of when the last reward was redeemed.

        :return: The last_reward_redeemed_date of this LoopyCard.
        :rtype: str
        """
        return self._last_reward_redeemed_date

    @last_reward_redeemed_date.setter
    def last_reward_redeemed_date(self, last_reward_redeemed_date):
        """
        Sets the last_reward_redeemed_date of this LoopyCard.
        ISO8601 formatted date of when the last reward was redeemed.

        :param last_reward_redeemed_date: The last_reward_redeemed_date of this LoopyCard.
        :type: str
        """

        self._last_reward_redeemed_date = last_reward_redeemed_date

    @property
    def customer_details(self):
        """
        Gets the customer_details of this LoopyCard.
        Contains the customer details for the card record.

        :return: The customer_details of this LoopyCard.
        :rtype: dict(str, str)
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """
        Sets the customer_details of this LoopyCard.
        Contains the customer details for the card record.

        :param customer_details: The customer_details of this LoopyCard.
        :type: dict(str, str)
        """

        self._customer_details = customer_details

    @property
    def create_year(self):
        """
        Gets the create_year of this LoopyCard.
        Helper field for the year the card was created.

        :return: The create_year of this LoopyCard.
        :rtype: int
        """
        return self._create_year

    @create_year.setter
    def create_year(self, create_year):
        """
        Sets the create_year of this LoopyCard.
        Helper field for the year the card was created.

        :param create_year: The create_year of this LoopyCard.
        :type: int
        """

        self._create_year = create_year

    @property
    def create_month(self):
        """
        Gets the create_month of this LoopyCard.
        Helper field for the month the card was created.

        :return: The create_month of this LoopyCard.
        :rtype: int
        """
        return self._create_month

    @create_month.setter
    def create_month(self, create_month):
        """
        Sets the create_month of this LoopyCard.
        Helper field for the month the card was created.

        :param create_month: The create_month of this LoopyCard.
        :type: int
        """

        self._create_month = create_month

    @property
    def create_day(self):
        """
        Gets the create_day of this LoopyCard.
        Helper field for the day the card was created.

        :return: The create_day of this LoopyCard.
        :rtype: int
        """
        return self._create_day

    @create_day.setter
    def create_day(self, create_day):
        """
        Sets the create_day of this LoopyCard.
        Helper field for the day the card was created.

        :param create_day: The create_day of this LoopyCard.
        :type: int
        """

        self._create_day = create_day

    @property
    def unique_ids(self):
        """
        Gets the unique_ids of this LoopyCard.
        Unique IDs for the card. Can be used to engage with the card.

        :return: The unique_ids of this LoopyCard.
        :rtype: LoopyCardUniqueIds
        """
        return self._unique_ids

    @unique_ids.setter
    def unique_ids(self, unique_ids):
        """
        Sets the unique_ids of this LoopyCard.
        Unique IDs for the card. Can be used to engage with the card.

        :param unique_ids: The unique_ids of this LoopyCard.
        :type: LoopyCardUniqueIds
        """

        self._unique_ids = unique_ids

    @property
    def expiry(self):
        """
        Gets the expiry of this LoopyCard.
        Optional expiry date for the card.

        :return: The expiry of this LoopyCard.
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """
        Sets the expiry of this LoopyCard.
        Optional expiry date for the card.

        :param expiry: The expiry of this LoopyCard.
        :type: str
        """

        self._expiry = expiry

    @property
    def opt_out(self):
        """
        Gets the opt_out of this LoopyCard.
        Indicates if this customer opted out from receiving Lockscreen notifications on messaging.

        :return: The opt_out of this LoopyCard.
        :rtype: bool
        """
        return self._opt_out

    @opt_out.setter
    def opt_out(self, opt_out):
        """
        Sets the opt_out of this LoopyCard.
        Indicates if this customer opted out from receiving Lockscreen notifications on messaging.

        :param opt_out: The opt_out of this LoopyCard.
        :type: bool
        """

        self._opt_out = opt_out

    @property
    def create_time(self):
        """
        Gets the create_time of this LoopyCard.
        ISO8601 formatted date of when the card was created.

        :return: The create_time of this LoopyCard.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this LoopyCard.
        ISO8601 formatted date of when the card was created.

        :param create_time: The create_time of this LoopyCard.
        :type: str
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """
        Gets the update_time of this LoopyCard.
        ISO8601 formatted date of when the card was last updated.

        :return: The update_time of this LoopyCard.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this LoopyCard.
        ISO8601 formatted date of when the card was last updated.

        :param update_time: The update_time of this LoopyCard.
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

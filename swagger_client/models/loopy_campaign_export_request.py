# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyCampaignExportRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, timezone=None, segment=None):
        """
        LoopyCampaignExportRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'timezone': 'str',
            'segment': 'LoopyExportSegment'
        }

        self.attribute_map = {
            'id': 'id',
            'timezone': 'timezone',
            'segment': 'segment'
        }

        self._id = id
        self._timezone = timezone
        self._segment = segment

    @property
    def id(self):
        """
        Gets the id of this LoopyCampaignExportRequest.
        Campaign ID: compressed 22 character UUID.

        :return: The id of this LoopyCampaignExportRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyCampaignExportRequest.
        Campaign ID: compressed 22 character UUID.

        :param id: The id of this LoopyCampaignExportRequest.
        :type: str
        """

        self._id = id

    @property
    def timezone(self):
        """
        Gets the timezone of this LoopyCampaignExportRequest.
        Timezone string in [IANA timezone format](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :return: The timezone of this LoopyCampaignExportRequest.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this LoopyCampaignExportRequest.
        Timezone string in [IANA timezone format](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :param timezone: The timezone of this LoopyCampaignExportRequest.
        :type: str
        """

        self._timezone = timezone

    @property
    def segment(self):
        """
        Gets the segment of this LoopyCampaignExportRequest.
        Segment to export.

        :return: The segment of this LoopyCampaignExportRequest.
        :rtype: LoopyExportSegment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """
        Sets the segment of this LoopyCampaignExportRequest.
        Segment to export.

        :param segment: The segment of this LoopyCampaignExportRequest.
        :type: LoopyExportSegment
        """

        self._segment = segment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

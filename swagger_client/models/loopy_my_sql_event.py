# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyMySqlEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uuid=None, card_id=None, username=None, type=None, quantity=None, location_name=None, reward_name=None, s_lat=None, s_lon=None, ip=None, ua=None, referrer=None, created=None):
        """
        LoopyMySqlEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uuid': 'str',
            'card_id': 'str',
            'username': 'str',
            'type': 'int',
            'quantity': 'int',
            'location_name': 'str',
            'reward_name': 'str',
            's_lat': 'float',
            's_lon': 'float',
            'ip': 'str',
            'ua': 'str',
            'referrer': 'str',
            'created': 'str'
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'card_id': 'cardId',
            'username': 'username',
            'type': 'type',
            'quantity': 'quantity',
            'location_name': 'locationName',
            'reward_name': 'rewardName',
            's_lat': 'sLat',
            's_lon': 'sLon',
            'ip': 'ip',
            'ua': 'ua',
            'referrer': 'referrer',
            'created': 'created'
        }

        self._uuid = uuid
        self._card_id = card_id
        self._username = username
        self._type = type
        self._quantity = quantity
        self._location_name = location_name
        self._reward_name = reward_name
        self._s_lat = s_lat
        self._s_lon = s_lon
        self._ip = ip
        self._ua = ua
        self._referrer = referrer
        self._created = created

    @property
    def uuid(self):
        """
        Gets the uuid of this LoopyMySqlEvent.
        Event ID: compressed 22 character UUID.

        :return: The uuid of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this LoopyMySqlEvent.
        Event ID: compressed 22 character UUID.

        :param uuid: The uuid of this LoopyMySqlEvent.
        :type: str
        """

        self._uuid = uuid

    @property
    def card_id(self):
        """
        Gets the card_id of this LoopyMySqlEvent.
        Card ID of the card the event belongs to: compressed 22 character UUID.

        :return: The card_id of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """
        Sets the card_id of this LoopyMySqlEvent.
        Card ID of the card the event belongs to: compressed 22 character UUID.

        :param card_id: The card_id of this LoopyMySqlEvent.
        :type: str
        """

        self._card_id = card_id

    @property
    def username(self):
        """
        Gets the username of this LoopyMySqlEvent.
        Username of the user the event belongs to.

        :return: The username of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this LoopyMySqlEvent.
        Username of the user the event belongs to.

        :param username: The username of this LoopyMySqlEvent.
        :type: str
        """

        self._username = username

    @property
    def type(self):
        """
        Gets the type of this LoopyMySqlEvent.
        Event type (`0`:\"Enrol\",`1`:\"Stamp\",`2`:\"ReceiveReward\",`3`:\"RedeemReward\",`4`:\"TapLink\",`5`:\"WalletRegister\",`6`\"WalletDeregister\",`7`:\"AndroidPayRegister\",`8`:\"DeleteCard\",`9`:\"ForfeitReward\".

        :return: The type of this LoopyMySqlEvent.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this LoopyMySqlEvent.
        Event type (`0`:\"Enrol\",`1`:\"Stamp\",`2`:\"ReceiveReward\",`3`:\"RedeemReward\",`4`:\"TapLink\",`5`:\"WalletRegister\",`6`\"WalletDeregister\",`7`:\"AndroidPayRegister\",`8`:\"DeleteCard\",`9`:\"ForfeitReward\".

        :param type: The type of this LoopyMySqlEvent.
        :type: int
        """

        self._type = type

    @property
    def quantity(self):
        """
        Gets the quantity of this LoopyMySqlEvent.
        Quantity of the event.

        :return: The quantity of this LoopyMySqlEvent.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this LoopyMySqlEvent.
        Quantity of the event.

        :param quantity: The quantity of this LoopyMySqlEvent.
        :type: int
        """

        self._quantity = quantity

    @property
    def location_name(self):
        """
        Gets the location_name of this LoopyMySqlEvent.
        Location name where the reward was redeemed or earned - set in case of eventType is `2` (ReceiveReward) or `3` (RedeemReward).

        :return: The location_name of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """
        Sets the location_name of this LoopyMySqlEvent.
        Location name where the reward was redeemed or earned - set in case of eventType is `2` (ReceiveReward) or `3` (RedeemReward).

        :param location_name: The location_name of this LoopyMySqlEvent.
        :type: str
        """

        self._location_name = location_name

    @property
    def reward_name(self):
        """
        Gets the reward_name of this LoopyMySqlEvent.
        Reward name where the reward was redeemed or earned - set in case of eventType is `2` (ReceiveReward) or `3` (RedeemReward).

        :return: The reward_name of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._reward_name

    @reward_name.setter
    def reward_name(self, reward_name):
        """
        Sets the reward_name of this LoopyMySqlEvent.
        Reward name where the reward was redeemed or earned - set in case of eventType is `2` (ReceiveReward) or `3` (RedeemReward).

        :param reward_name: The reward_name of this LoopyMySqlEvent.
        :type: str
        """

        self._reward_name = reward_name

    @property
    def s_lat(self):
        """
        Gets the s_lat of this LoopyMySqlEvent.
        Scan latitude.

        :return: The s_lat of this LoopyMySqlEvent.
        :rtype: float
        """
        return self._s_lat

    @s_lat.setter
    def s_lat(self, s_lat):
        """
        Sets the s_lat of this LoopyMySqlEvent.
        Scan latitude.

        :param s_lat: The s_lat of this LoopyMySqlEvent.
        :type: float
        """

        self._s_lat = s_lat

    @property
    def s_lon(self):
        """
        Gets the s_lon of this LoopyMySqlEvent.
        Scan longitude.

        :return: The s_lon of this LoopyMySqlEvent.
        :rtype: float
        """
        return self._s_lon

    @s_lon.setter
    def s_lon(self, s_lon):
        """
        Sets the s_lon of this LoopyMySqlEvent.
        Scan longitude.

        :param s_lon: The s_lon of this LoopyMySqlEvent.
        :type: float
        """

        self._s_lon = s_lon

    @property
    def ip(self):
        """
        Gets the ip of this LoopyMySqlEvent.
        IP address of the event.

        :return: The ip of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this LoopyMySqlEvent.
        IP address of the event.

        :param ip: The ip of this LoopyMySqlEvent.
        :type: str
        """

        self._ip = ip

    @property
    def ua(self):
        """
        Gets the ua of this LoopyMySqlEvent.
        User agent details.

        :return: The ua of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._ua

    @ua.setter
    def ua(self, ua):
        """
        Sets the ua of this LoopyMySqlEvent.
        User agent details.

        :param ua: The ua of this LoopyMySqlEvent.
        :type: str
        """

        self._ua = ua

    @property
    def referrer(self):
        """
        Gets the referrer of this LoopyMySqlEvent.
        Referrer details.

        :return: The referrer of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """
        Sets the referrer of this LoopyMySqlEvent.
        Referrer details.

        :param referrer: The referrer of this LoopyMySqlEvent.
        :type: str
        """

        self._referrer = referrer

    @property
    def created(self):
        """
        Gets the created of this LoopyMySqlEvent.
        ISO8601 formatted date of when the event was created.

        :return: The created of this LoopyMySqlEvent.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this LoopyMySqlEvent.
        ISO8601 formatted date of when the event was created.

        :param created: The created of this LoopyMySqlEvent.
        :type: str
        """

        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

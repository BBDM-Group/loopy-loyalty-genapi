# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyReward(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, reward_name=None, reward_text=None, stamps_required=None, stamp_lockscreen_message=None, reward_lockscreen_message=None, cost=None, currency=None):
        """
        LoopyReward - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'reward_name': 'str',
            'reward_text': 'str',
            'stamps_required': 'int',
            'stamp_lockscreen_message': 'str',
            'reward_lockscreen_message': 'str',
            'cost': 'float',
            'currency': 'str'
        }

        self.attribute_map = {
            'reward_name': 'rewardName',
            'reward_text': 'rewardText',
            'stamps_required': 'stampsRequired',
            'stamp_lockscreen_message': 'stampLockscreenMessage',
            'reward_lockscreen_message': 'rewardLockscreenMessage',
            'cost': 'cost',
            'currency': 'currency'
        }

        self._reward_name = reward_name
        self._reward_text = reward_text
        self._stamps_required = stamps_required
        self._stamp_lockscreen_message = stamp_lockscreen_message
        self._reward_lockscreen_message = reward_lockscreen_message
        self._cost = cost
        self._currency = currency

    @property
    def reward_name(self):
        """
        Gets the reward_name of this LoopyReward.
        Name of the reward.

        :return: The reward_name of this LoopyReward.
        :rtype: str
        """
        return self._reward_name

    @reward_name.setter
    def reward_name(self, reward_name):
        """
        Sets the reward_name of this LoopyReward.
        Name of the reward.

        :param reward_name: The reward_name of this LoopyReward.
        :type: str
        """

        self._reward_name = reward_name

    @property
    def reward_text(self):
        """
        Gets the reward_text of this LoopyReward.
        Reward description.

        :return: The reward_text of this LoopyReward.
        :rtype: str
        """
        return self._reward_text

    @reward_text.setter
    def reward_text(self, reward_text):
        """
        Sets the reward_text of this LoopyReward.
        Reward description.

        :param reward_text: The reward_text of this LoopyReward.
        :type: str
        """

        self._reward_text = reward_text

    @property
    def stamps_required(self):
        """
        Gets the stamps_required of this LoopyReward.
        The number of stamps required to get the reward. Needs to be <= campaign.baseStripImage.totalStamps.

        :return: The stamps_required of this LoopyReward.
        :rtype: int
        """
        return self._stamps_required

    @stamps_required.setter
    def stamps_required(self, stamps_required):
        """
        Sets the stamps_required of this LoopyReward.
        The number of stamps required to get the reward. Needs to be <= campaign.baseStripImage.totalStamps.

        :param stamps_required: The stamps_required of this LoopyReward.
        :type: int
        """

        self._stamps_required = stamps_required

    @property
    def stamp_lockscreen_message(self):
        """
        Gets the stamp_lockscreen_message of this LoopyReward.
        Stamp lock-screen success message customers will receive when they earn a stamp.

        :return: The stamp_lockscreen_message of this LoopyReward.
        :rtype: str
        """
        return self._stamp_lockscreen_message

    @stamp_lockscreen_message.setter
    def stamp_lockscreen_message(self, stamp_lockscreen_message):
        """
        Sets the stamp_lockscreen_message of this LoopyReward.
        Stamp lock-screen success message customers will receive when they earn a stamp.

        :param stamp_lockscreen_message: The stamp_lockscreen_message of this LoopyReward.
        :type: str
        """

        self._stamp_lockscreen_message = stamp_lockscreen_message

    @property
    def reward_lockscreen_message(self):
        """
        Gets the reward_lockscreen_message of this LoopyReward.
        Reward lock-screen success message customers will receive when they earn a reward.

        :return: The reward_lockscreen_message of this LoopyReward.
        :rtype: str
        """
        return self._reward_lockscreen_message

    @reward_lockscreen_message.setter
    def reward_lockscreen_message(self, reward_lockscreen_message):
        """
        Sets the reward_lockscreen_message of this LoopyReward.
        Reward lock-screen success message customers will receive when they earn a reward.

        :param reward_lockscreen_message: The reward_lockscreen_message of this LoopyReward.
        :type: str
        """

        self._reward_lockscreen_message = reward_lockscreen_message

    @property
    def cost(self):
        """
        Gets the cost of this LoopyReward.
        Cost of the reward.

        :return: The cost of this LoopyReward.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this LoopyReward.
        Cost of the reward.

        :param cost: The cost of this LoopyReward.
        :type: float
        """

        self._cost = cost

    @property
    def currency(self):
        """
        Gets the currency of this LoopyReward.
        Reward currency.

        :return: The currency of this LoopyReward.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this LoopyReward.
        Reward currency.

        :param currency: The currency of this LoopyReward.
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

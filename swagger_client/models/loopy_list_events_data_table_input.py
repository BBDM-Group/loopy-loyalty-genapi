# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyListEventsDataTableInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, length=None, search=None, order=None):
        """
        LoopyListEventsDataTableInput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start': 'str',
            'length': 'str',
            'search': 'str',
            'order': 'LoopyListEventsOrder'
        }

        self.attribute_map = {
            'start': 'start',
            'length': 'length',
            'search': 'search',
            'order': 'order'
        }

        self._start = start
        self._length = length
        self._search = search
        self._order = order

    @property
    def start(self):
        """
        Gets the start of this LoopyListEventsDataTableInput.
        Initial paging row start number, 0 based: i.e. 0 for the first row, 10 for the 11th row, etc.

        :return: The start of this LoopyListEventsDataTableInput.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this LoopyListEventsDataTableInput.
        Initial paging row start number, 0 based: i.e. 0 for the first row, 10 for the 11th row, etc.

        :param start: The start of this LoopyListEventsDataTableInput.
        :type: str
        """

        self._start = start

    @property
    def length(self):
        """
        Gets the length of this LoopyListEventsDataTableInput.
        Number of rows to return.

        :return: The length of this LoopyListEventsDataTableInput.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this LoopyListEventsDataTableInput.
        Number of rows to return.

        :param length: The length of this LoopyListEventsDataTableInput.
        :type: str
        """

        self._length = length

    @property
    def search(self):
        """
        Gets the search of this LoopyListEventsDataTableInput.
        A search term that is applied to username field of the event. The search value is prepended an appended with a wildcard; meaning it will return all event records where the username contains `{search}`. i.e. providing `{search}` = Peter will return all card records that contain the term Peter in the username.

        :return: The search of this LoopyListEventsDataTableInput.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """
        Sets the search of this LoopyListEventsDataTableInput.
        A search term that is applied to username field of the event. The search value is prepended an appended with a wildcard; meaning it will return all event records where the username contains `{search}`. i.e. providing `{search}` = Peter will return all card records that contain the term Peter in the username.

        :param search: The search of this LoopyListEventsDataTableInput.
        :type: str
        """

        self._search = search

    @property
    def order(self):
        """
        Gets the order of this LoopyListEventsDataTableInput.
        The order to apply to the query.

        :return: The order of this LoopyListEventsDataTableInput.
        :rtype: LoopyListEventsOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this LoopyListEventsDataTableInput.
        The order to apply to the query.

        :param order: The order of this LoopyListEventsDataTableInput.
        :type: LoopyListEventsOrder
        """

        self._order = order

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

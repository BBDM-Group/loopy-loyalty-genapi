# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyBeacon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uid=None, name=None, major=None, minor=None, uuid=None, relevant_text=None):
        """
        LoopyBeacon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'uid': 'str',
            'name': 'str',
            'major': 'int',
            'minor': 'int',
            'uuid': 'str',
            'relevant_text': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'uid': 'uid',
            'name': 'name',
            'major': 'major',
            'minor': 'minor',
            'uuid': 'uuid',
            'relevant_text': 'relevantText'
        }

        self._id = id
        self._uid = uid
        self._name = name
        self._major = major
        self._minor = minor
        self._uuid = uuid
        self._relevant_text = relevant_text

    @property
    def id(self):
        """
        Gets the id of this LoopyBeacon.
        Beacon ID. compressed 22 character UUID; auto generated.

        :return: The id of this LoopyBeacon.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyBeacon.
        Beacon ID. compressed 22 character UUID; auto generated.

        :param id: The id of this LoopyBeacon.
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """
        Gets the uid of this LoopyBeacon.
        User ID of the user the beacon belongs to: compressed 22 character UUID; read only; set by system.

        :return: The uid of this LoopyBeacon.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this LoopyBeacon.
        User ID of the user the beacon belongs to: compressed 22 character UUID; read only; set by system.

        :param uid: The uid of this LoopyBeacon.
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this LoopyBeacon.
        Beacon name.

        :return: The name of this LoopyBeacon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LoopyBeacon.
        Beacon name.

        :param name: The name of this LoopyBeacon.
        :type: str
        """

        self._name = name

    @property
    def major(self):
        """
        Gets the major of this LoopyBeacon.
        Major indicator.

        :return: The major of this LoopyBeacon.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """
        Sets the major of this LoopyBeacon.
        Major indicator.

        :param major: The major of this LoopyBeacon.
        :type: int
        """

        if not major:
            raise ValueError("Invalid value for `major`, must not be `None`")
        if major > 65535.0:
            raise ValueError("Invalid value for `major`, must be a value less than or equal to `65535.0`")

        self._major = major

    @property
    def minor(self):
        """
        Gets the minor of this LoopyBeacon.
        Minor indicator.

        :return: The minor of this LoopyBeacon.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """
        Sets the minor of this LoopyBeacon.
        Minor indicator.

        :param minor: The minor of this LoopyBeacon.
        :type: int
        """

        if not minor:
            raise ValueError("Invalid value for `minor`, must not be `None`")
        if minor > 65535.0:
            raise ValueError("Invalid value for `minor`, must be a value less than or equal to `65535.0`")

        self._minor = minor

    @property
    def uuid(self):
        """
        Gets the uuid of this LoopyBeacon.
        A valid UUID that is broadcast from your beacon.

        :return: The uuid of this LoopyBeacon.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this LoopyBeacon.
        A valid UUID that is broadcast from your beacon.

        :param uuid: The uuid of this LoopyBeacon.
        :type: str
        """

        self._uuid = uuid

    @property
    def relevant_text(self):
        """
        Gets the relevant_text of this LoopyBeacon.
        Text shown on the lock-screen when a customer is in range of the beacon.

        :return: The relevant_text of this LoopyBeacon.
        :rtype: str
        """
        return self._relevant_text

    @relevant_text.setter
    def relevant_text(self, relevant_text):
        """
        Sets the relevant_text of this LoopyBeacon.
        Text shown on the lock-screen when a customer is in range of the beacon.

        :param relevant_text: The relevant_text of this LoopyBeacon.
        :type: str
        """

        self._relevant_text = relevant_text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

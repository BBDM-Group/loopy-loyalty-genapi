# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyCampaignPublic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, description=None, fields_to_collect=None, design=None, rewards=None, terms=None, disable_terms=None, unique_email_field_name=None, unique_phone_field_name=None, unique_text_field_name=None, default_country_code=None, consent_enabled=None, consent_text=None, consent_checkbox_enabled=None, labels=None, business=None):
        """
        LoopyCampaignPublic - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'fields_to_collect': 'list[LoopyDataField]',
            'design': 'LoopyDesign',
            'rewards': 'list[LoopyReward]',
            'terms': 'str',
            'disable_terms': 'bool',
            'unique_email_field_name': 'str',
            'unique_phone_field_name': 'str',
            'unique_text_field_name': 'str',
            'default_country_code': 'str',
            'consent_enabled': 'bool',
            'consent_text': 'str',
            'consent_checkbox_enabled': 'bool',
            'labels': 'list[str]',
            'business': 'LoopyBusiness'
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'fields_to_collect': 'fieldsToCollect',
            'design': 'design',
            'rewards': 'rewards',
            'terms': 'terms',
            'disable_terms': 'disableTerms',
            'unique_email_field_name': 'uniqueEmailFieldName',
            'unique_phone_field_name': 'uniquePhoneFieldName',
            'unique_text_field_name': 'uniqueTextFieldName',
            'default_country_code': 'defaultCountryCode',
            'consent_enabled': 'consentEnabled',
            'consent_text': 'consentText',
            'consent_checkbox_enabled': 'consentCheckboxEnabled',
            'labels': 'labels',
            'business': 'business'
        }

        self._id = id
        self._description = description
        self._fields_to_collect = fields_to_collect
        self._design = design
        self._rewards = rewards
        self._terms = terms
        self._disable_terms = disable_terms
        self._unique_email_field_name = unique_email_field_name
        self._unique_phone_field_name = unique_phone_field_name
        self._unique_text_field_name = unique_text_field_name
        self._default_country_code = default_country_code
        self._consent_enabled = consent_enabled
        self._consent_text = consent_text
        self._consent_checkbox_enabled = consent_checkbox_enabled
        self._labels = labels
        self._business = business

    @property
    def id(self):
        """
        Gets the id of this LoopyCampaignPublic.
        Campaign ID (unique). Compressed 22 character UUID.

        :return: The id of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyCampaignPublic.
        Campaign ID (unique). Compressed 22 character UUID.

        :param id: The id of this LoopyCampaignPublic.
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this LoopyCampaignPublic.
        Campaign description.

        :return: The description of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LoopyCampaignPublic.
        Campaign description.

        :param description: The description of this LoopyCampaignPublic.
        :type: str
        """

        self._description = description

    @property
    def fields_to_collect(self):
        """
        Gets the fields_to_collect of this LoopyCampaignPublic.
        Data fields that this campaign collects on enrolment.

        :return: The fields_to_collect of this LoopyCampaignPublic.
        :rtype: list[LoopyDataField]
        """
        return self._fields_to_collect

    @fields_to_collect.setter
    def fields_to_collect(self, fields_to_collect):
        """
        Sets the fields_to_collect of this LoopyCampaignPublic.
        Data fields that this campaign collects on enrolment.

        :param fields_to_collect: The fields_to_collect of this LoopyCampaignPublic.
        :type: list[LoopyDataField]
        """

        self._fields_to_collect = fields_to_collect

    @property
    def design(self):
        """
        Gets the design of this LoopyCampaignPublic.


        :return: The design of this LoopyCampaignPublic.
        :rtype: LoopyDesign
        """
        return self._design

    @design.setter
    def design(self, design):
        """
        Sets the design of this LoopyCampaignPublic.


        :param design: The design of this LoopyCampaignPublic.
        :type: LoopyDesign
        """

        self._design = design

    @property
    def rewards(self):
        """
        Gets the rewards of this LoopyCampaignPublic.
        Array of the rewards and reward logic.

        :return: The rewards of this LoopyCampaignPublic.
        :rtype: list[LoopyReward]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """
        Sets the rewards of this LoopyCampaignPublic.
        Array of the rewards and reward logic.

        :param rewards: The rewards of this LoopyCampaignPublic.
        :type: list[LoopyReward]
        """

        self._rewards = rewards

    @property
    def terms(self):
        """
        Gets the terms of this LoopyCampaignPublic.
        Terms & conditions for the campaign.

        :return: The terms of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this LoopyCampaignPublic.
        Terms & conditions for the campaign.

        :param terms: The terms of this LoopyCampaignPublic.
        :type: str
        """

        self._terms = terms

    @property
    def disable_terms(self):
        """
        Gets the disable_terms of this LoopyCampaignPublic.
        Indicates if terms & conditions are enabled.

        :return: The disable_terms of this LoopyCampaignPublic.
        :rtype: bool
        """
        return self._disable_terms

    @disable_terms.setter
    def disable_terms(self, disable_terms):
        """
        Sets the disable_terms of this LoopyCampaignPublic.
        Indicates if terms & conditions are enabled.

        :param disable_terms: The disable_terms of this LoopyCampaignPublic.
        :type: bool
        """

        self._disable_terms = disable_terms

    @property
    def unique_email_field_name(self):
        """
        Gets the unique_email_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique email enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, email is not enforced as unique.

        :return: The unique_email_field_name of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._unique_email_field_name

    @unique_email_field_name.setter
    def unique_email_field_name(self, unique_email_field_name):
        """
        Sets the unique_email_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique email enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, email is not enforced as unique.

        :param unique_email_field_name: The unique_email_field_name of this LoopyCampaignPublic.
        :type: str
        """

        self._unique_email_field_name = unique_email_field_name

    @property
    def unique_phone_field_name(self):
        """
        Gets the unique_phone_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique phone number enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, phone number is not enforced as unique.

        :return: The unique_phone_field_name of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._unique_phone_field_name

    @unique_phone_field_name.setter
    def unique_phone_field_name(self, unique_phone_field_name):
        """
        Sets the unique_phone_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique phone number enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, phone number is not enforced as unique.

        :param unique_phone_field_name: The unique_phone_field_name of this LoopyCampaignPublic.
        :type: str
        """

        self._unique_phone_field_name = unique_phone_field_name

    @property
    def unique_text_field_name(self):
        """
        Gets the unique_text_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique text enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, text is not enforced as unique.

        :return: The unique_text_field_name of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._unique_text_field_name

    @unique_text_field_name.setter
    def unique_text_field_name(self, unique_text_field_name):
        """
        Sets the unique_text_field_name of this LoopyCampaignPublic.
        Optional field that contains the name of the data field that is used for unique text enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, text is not enforced as unique.

        :param unique_text_field_name: The unique_text_field_name of this LoopyCampaignPublic.
        :type: str
        """

        self._unique_text_field_name = unique_text_field_name

    @property
    def default_country_code(self):
        """
        Gets the default_country_code of this LoopyCampaignPublic.
        Optional default country code to be used for telephone number formatting. Country code needs to be a valid '[ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)' code.

        :return: The default_country_code of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._default_country_code

    @default_country_code.setter
    def default_country_code(self, default_country_code):
        """
        Sets the default_country_code of this LoopyCampaignPublic.
        Optional default country code to be used for telephone number formatting. Country code needs to be a valid '[ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)' code.

        :param default_country_code: The default_country_code of this LoopyCampaignPublic.
        :type: str
        """

        self._default_country_code = default_country_code

    @property
    def consent_enabled(self):
        """
        Gets the consent_enabled of this LoopyCampaignPublic.
        Indicates if data consent text is enabled.

        :return: The consent_enabled of this LoopyCampaignPublic.
        :rtype: bool
        """
        return self._consent_enabled

    @consent_enabled.setter
    def consent_enabled(self, consent_enabled):
        """
        Sets the consent_enabled of this LoopyCampaignPublic.
        Indicates if data consent text is enabled.

        :param consent_enabled: The consent_enabled of this LoopyCampaignPublic.
        :type: bool
        """

        self._consent_enabled = consent_enabled

    @property
    def consent_text(self):
        """
        Gets the consent_text of this LoopyCampaignPublic.
        Data consent text for the campaign.

        :return: The consent_text of this LoopyCampaignPublic.
        :rtype: str
        """
        return self._consent_text

    @consent_text.setter
    def consent_text(self, consent_text):
        """
        Sets the consent_text of this LoopyCampaignPublic.
        Data consent text for the campaign.

        :param consent_text: The consent_text of this LoopyCampaignPublic.
        :type: str
        """

        self._consent_text = consent_text

    @property
    def consent_checkbox_enabled(self):
        """
        Gets the consent_checkbox_enabled of this LoopyCampaignPublic.
        Indicates if the data consent checkbox is enabled by default.

        :return: The consent_checkbox_enabled of this LoopyCampaignPublic.
        :rtype: bool
        """
        return self._consent_checkbox_enabled

    @consent_checkbox_enabled.setter
    def consent_checkbox_enabled(self, consent_checkbox_enabled):
        """
        Sets the consent_checkbox_enabled of this LoopyCampaignPublic.
        Indicates if the data consent checkbox is enabled by default.

        :param consent_checkbox_enabled: The consent_checkbox_enabled of this LoopyCampaignPublic.
        :type: bool
        """

        self._consent_checkbox_enabled = consent_checkbox_enabled

    @property
    def labels(self):
        """
        Gets the labels of this LoopyCampaignPublic.
        Translated labels used in the campaign. [Base object to be used](https://github.com/PassKit/loopy-loyalty-rest-examples/blob/main/docs-references/labels.md).

        :return: The labels of this LoopyCampaignPublic.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this LoopyCampaignPublic.
        Translated labels used in the campaign. [Base object to be used](https://github.com/PassKit/loopy-loyalty-rest-examples/blob/main/docs-references/labels.md).

        :param labels: The labels of this LoopyCampaignPublic.
        :type: list[str]
        """

        self._labels = labels

    @property
    def business(self):
        """
        Gets the business of this LoopyCampaignPublic.


        :return: The business of this LoopyCampaignPublic.
        :rtype: LoopyBusiness
        """
        return self._business

    @business.setter
    def business(self, business):
        """
        Sets the business of this LoopyCampaignPublic.


        :param business: The business of this LoopyCampaignPublic.
        :type: LoopyBusiness
        """

        self._business = business

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

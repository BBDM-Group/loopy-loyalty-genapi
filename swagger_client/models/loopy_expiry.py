# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyExpiry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, no_expiry=None, expiry_date=None, expires_after=None):
        """
        LoopyExpiry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'no_expiry': 'bool',
            'expiry_date': 'str',
            'expires_after': 'int'
        }

        self.attribute_map = {
            'no_expiry': 'noExpiry',
            'expiry_date': 'expiryDate',
            'expires_after': 'expiresAfter'
        }

        self._no_expiry = no_expiry
        self._expiry_date = expiry_date
        self._expires_after = expires_after

    @property
    def no_expiry(self):
        """
        Gets the no_expiry of this LoopyExpiry.
        Indicates if this campaign expires.

        :return: The no_expiry of this LoopyExpiry.
        :rtype: bool
        """
        return self._no_expiry

    @no_expiry.setter
    def no_expiry(self, no_expiry):
        """
        Sets the no_expiry of this LoopyExpiry.
        Indicates if this campaign expires.

        :param no_expiry: The no_expiry of this LoopyExpiry.
        :type: bool
        """

        self._no_expiry = no_expiry

    @property
    def expiry_date(self):
        """
        Gets the expiry_date of this LoopyExpiry.
        ISO8601 formatted expiry date.

        :return: The expiry_date of this LoopyExpiry.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """
        Sets the expiry_date of this LoopyExpiry.
        ISO8601 formatted expiry date.

        :param expiry_date: The expiry_date of this LoopyExpiry.
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def expires_after(self):
        """
        Gets the expires_after of this LoopyExpiry.
        Indicates the number of days a card expires from enrolment.

        :return: The expires_after of this LoopyExpiry.
        :rtype: int
        """
        return self._expires_after

    @expires_after.setter
    def expires_after(self, expires_after):
        """
        Sets the expires_after of this LoopyExpiry.
        Indicates the number of days a card expires from enrolment.

        :param expires_after: The expires_after of this LoopyExpiry.
        :type: int
        """

        self._expires_after = expires_after

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

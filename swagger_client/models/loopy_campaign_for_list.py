# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyCampaignForList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, labels=None, design=None, unique_email_field_name=None, unique_phone_field_name=None, unique_text_field_name=None, status=None, create_time=None, update_time=None):
        """
        LoopyCampaignForList - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'labels': 'list[str]',
            'design': 'LoopyDesign',
            'unique_email_field_name': 'str',
            'unique_phone_field_name': 'str',
            'unique_text_field_name': 'str',
            'status': 'str',
            'create_time': 'str',
            'update_time': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'labels': 'labels',
            'design': 'design',
            'unique_email_field_name': 'uniqueEmailFieldName',
            'unique_phone_field_name': 'uniquePhoneFieldName',
            'unique_text_field_name': 'uniqueTextFieldName',
            'status': 'status',
            'create_time': 'createTime',
            'update_time': 'updateTime'
        }

        self._id = id
        self._name = name
        self._labels = labels
        self._design = design
        self._unique_email_field_name = unique_email_field_name
        self._unique_phone_field_name = unique_phone_field_name
        self._unique_text_field_name = unique_text_field_name
        self._status = status
        self._create_time = create_time
        self._update_time = update_time

    @property
    def id(self):
        """
        Gets the id of this LoopyCampaignForList.
        Campaign ID: compressed 22 character UUID.

        :return: The id of this LoopyCampaignForList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LoopyCampaignForList.
        Campaign ID: compressed 22 character UUID.

        :param id: The id of this LoopyCampaignForList.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this LoopyCampaignForList.
        Name of the campaign.

        :return: The name of this LoopyCampaignForList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LoopyCampaignForList.
        Name of the campaign.

        :param name: The name of this LoopyCampaignForList.
        :type: str
        """

        self._name = name

    @property
    def labels(self):
        """
        Gets the labels of this LoopyCampaignForList.
        Translated labels used in the campaign. [Base object to be used](https://github.com/PassKit/loopy-loyalty-rest-examples/blob/main/docs-references/labels.md).

        :return: The labels of this LoopyCampaignForList.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this LoopyCampaignForList.
        Translated labels used in the campaign. [Base object to be used](https://github.com/PassKit/loopy-loyalty-rest-examples/blob/main/docs-references/labels.md).

        :param labels: The labels of this LoopyCampaignForList.
        :type: list[str]
        """

        self._labels = labels

    @property
    def design(self):
        """
        Gets the design of this LoopyCampaignForList.


        :return: The design of this LoopyCampaignForList.
        :rtype: LoopyDesign
        """
        return self._design

    @design.setter
    def design(self, design):
        """
        Sets the design of this LoopyCampaignForList.


        :param design: The design of this LoopyCampaignForList.
        :type: LoopyDesign
        """

        self._design = design

    @property
    def unique_email_field_name(self):
        """
        Gets the unique_email_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique email enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, email is not enforced as unique.

        :return: The unique_email_field_name of this LoopyCampaignForList.
        :rtype: str
        """
        return self._unique_email_field_name

    @unique_email_field_name.setter
    def unique_email_field_name(self, unique_email_field_name):
        """
        Sets the unique_email_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique email enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, email is not enforced as unique.

        :param unique_email_field_name: The unique_email_field_name of this LoopyCampaignForList.
        :type: str
        """

        self._unique_email_field_name = unique_email_field_name

    @property
    def unique_phone_field_name(self):
        """
        Gets the unique_phone_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique phone number enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, phone number is not enforced as unique.

        :return: The unique_phone_field_name of this LoopyCampaignForList.
        :rtype: str
        """
        return self._unique_phone_field_name

    @unique_phone_field_name.setter
    def unique_phone_field_name(self, unique_phone_field_name):
        """
        Sets the unique_phone_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique phone number enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, phone number is not enforced as unique.

        :param unique_phone_field_name: The unique_phone_field_name of this LoopyCampaignForList.
        :type: str
        """

        self._unique_phone_field_name = unique_phone_field_name

    @property
    def unique_text_field_name(self):
        """
        Gets the unique_text_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique text enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, text is not enforced as unique.

        :return: The unique_text_field_name of this LoopyCampaignForList.
        :rtype: str
        """
        return self._unique_text_field_name

    @unique_text_field_name.setter
    def unique_text_field_name(self, unique_text_field_name):
        """
        Sets the unique_text_field_name of this LoopyCampaignForList.
        Optional field that contains the name of the data field that is used for unique text enrolments. The field name needs to exists in `campaign.fieldsToCollect`. If left blank, text is not enforced as unique.

        :param unique_text_field_name: The unique_text_field_name of this LoopyCampaignForList.
        :type: str
        """

        self._unique_text_field_name = unique_text_field_name

    @property
    def status(self):
        """
        Gets the status of this LoopyCampaignForList.
        Campaign status enum. `1`: draft, `2`: published.

        :return: The status of this LoopyCampaignForList.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LoopyCampaignForList.
        Campaign status enum. `1`: draft, `2`: published.

        :param status: The status of this LoopyCampaignForList.
        :type: str
        """

        self._status = status

    @property
    def create_time(self):
        """
        Gets the create_time of this LoopyCampaignForList.
        ISO8601 formatted create date.

        :return: The create_time of this LoopyCampaignForList.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this LoopyCampaignForList.
        ISO8601 formatted create date.

        :param create_time: The create_time of this LoopyCampaignForList.
        :type: str
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """
        Gets the update_time of this LoopyCampaignForList.
        ISO8601 formatted update date.

        :return: The update_time of this LoopyCampaignForList.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """
        Sets the update_time of this LoopyCampaignForList.
        ISO8601 formatted update date.

        :param update_time: The update_time of this LoopyCampaignForList.
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

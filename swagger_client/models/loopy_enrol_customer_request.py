# coding: utf-8

"""
    Loopy Loyalty API

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: support@loopyloyalty.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoopyEnrolCustomerRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, campaign_id=None, customer_data=None, data_consent_opt_in=None, time_zone_offset=None):
        """
        LoopyEnrolCustomerRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'campaign_id': 'str',
            'customer_data': 'dict(str, str)',
            'data_consent_opt_in': 'bool',
            'time_zone_offset': 'str'
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'customer_data': 'customerData',
            'data_consent_opt_in': 'dataConsentOptIn',
            'time_zone_offset': 'timeZoneOffset'
        }

        self._campaign_id = campaign_id
        self._customer_data = customer_data
        self._data_consent_opt_in = data_consent_opt_in
        self._time_zone_offset = time_zone_offset

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this LoopyEnrolCustomerRequest.
        The ID of the campaign. The Loopy Loyalty campaign ID can be found in the URL bar when looking at the campaign overview (https://app.loopyloyalty.com/overview/{campaignId}).

        :return: The campaign_id of this LoopyEnrolCustomerRequest.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this LoopyEnrolCustomerRequest.
        The ID of the campaign. The Loopy Loyalty campaign ID can be found in the URL bar when looking at the campaign overview (https://app.loopyloyalty.com/overview/{campaignId}).

        :param campaign_id: The campaign_id of this LoopyEnrolCustomerRequest.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def customer_data(self):
        """
        Gets the customer_data of this LoopyEnrolCustomerRequest.
        A dictionary of customer data. The dictionary keys are the fields names set in the description column in the '[Edit design data](http://docs.loopyloyalty.com/en/articles/932782-data-collection-and-customer-information)' section of the portal.

        :return: The customer_data of this LoopyEnrolCustomerRequest.
        :rtype: dict(str, str)
        """
        return self._customer_data

    @customer_data.setter
    def customer_data(self, customer_data):
        """
        Sets the customer_data of this LoopyEnrolCustomerRequest.
        A dictionary of customer data. The dictionary keys are the fields names set in the description column in the '[Edit design data](http://docs.loopyloyalty.com/en/articles/932782-data-collection-and-customer-information)' section of the portal.

        :param customer_data: The customer_data of this LoopyEnrolCustomerRequest.
        :type: dict(str, str)
        """

        self._customer_data = customer_data

    @property
    def data_consent_opt_in(self):
        """
        Gets the data_consent_opt_in of this LoopyEnrolCustomerRequest.
        If the campaign has `consentEnabled = true`, then we respect the dataConsentOptIn boolean for new members. If this field is not set on the campaign, then all new members will default to opted in.

        :return: The data_consent_opt_in of this LoopyEnrolCustomerRequest.
        :rtype: bool
        """
        return self._data_consent_opt_in

    @data_consent_opt_in.setter
    def data_consent_opt_in(self, data_consent_opt_in):
        """
        Sets the data_consent_opt_in of this LoopyEnrolCustomerRequest.
        If the campaign has `consentEnabled = true`, then we respect the dataConsentOptIn boolean for new members. If this field is not set on the campaign, then all new members will default to opted in.

        :param data_consent_opt_in: The data_consent_opt_in of this LoopyEnrolCustomerRequest.
        :type: bool
        """

        self._data_consent_opt_in = data_consent_opt_in

    @property
    def time_zone_offset(self):
        """
        Gets the time_zone_offset of this LoopyEnrolCustomerRequest.
        Applicable to campaigns that have expiry settings. Will apply the timezone offset to the expiry date. Defaults to UTC if omitted.

        :return: The time_zone_offset of this LoopyEnrolCustomerRequest.
        :rtype: str
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """
        Sets the time_zone_offset of this LoopyEnrolCustomerRequest.
        Applicable to campaigns that have expiry settings. Will apply the timezone offset to the expiry date. Defaults to UTC if omitted.

        :param time_zone_offset: The time_zone_offset of this LoopyEnrolCustomerRequest.
        :type: str
        """

        self._time_zone_offset = time_zone_offset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
